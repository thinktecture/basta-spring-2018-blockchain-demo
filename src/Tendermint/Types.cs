// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/types.proto

#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;

namespace Types
{
    /// <summary>Holder for reflection information generated from protos/types.proto</summary>
    public static partial class TypesReflection
    {
        #region Descriptor

        /// <summary>File descriptor for protos/types.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }

        private static pbr::FileDescriptor descriptor;

        static TypesReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                    "ChJwcm90b3MvdHlwZXMucHJvdG8SBXR5cGVzGi1naXRodWIuY29tL2dvZ28v",
                    "cHJvdG9idWYvZ29nb3Byb3RvL2dvZ28ucHJvdG8i5AMKB1JlcXVlc3QSIgoE",
                    "ZWNobxgCIAEoCzISLnR5cGVzLlJlcXVlc3RFY2hvSAASJAoFZmx1c2gYAyAB",
                    "KAsyEy50eXBlcy5SZXF1ZXN0Rmx1c2hIABIiCgRpbmZvGAQgASgLMhIudHlw",
                    "ZXMuUmVxdWVzdEluZm9IABItCgpzZXRfb3B0aW9uGAUgASgLMhcudHlwZXMu",
                    "UmVxdWVzdFNldE9wdGlvbkgAEi0KCmluaXRfY2hhaW4YBiABKAsyFy50eXBl",
                    "cy5SZXF1ZXN0SW5pdENoYWluSAASJAoFcXVlcnkYByABKAsyEy50eXBlcy5S",
                    "ZXF1ZXN0UXVlcnlIABIvCgtiZWdpbl9ibG9jaxgIIAEoCzIYLnR5cGVzLlJl",
                    "cXVlc3RCZWdpbkJsb2NrSAASKQoIY2hlY2tfdHgYCSABKAsyFS50eXBlcy5S",
                    "ZXF1ZXN0Q2hlY2tUeEgAEi0KCmRlbGl2ZXJfdHgYEyABKAsyFy50eXBlcy5S",
                    "ZXF1ZXN0RGVsaXZlclR4SAASKwoJZW5kX2Jsb2NrGAsgASgLMhYudHlwZXMu",
                    "UmVxdWVzdEVuZEJsb2NrSAASJgoGY29tbWl0GAwgASgLMhQudHlwZXMuUmVx",
                    "dWVzdENvbW1pdEgAQgcKBXZhbHVlIh4KC1JlcXVlc3RFY2hvEg8KB21lc3Nh",
                    "Z2UYASABKAkiDgoMUmVxdWVzdEZsdXNoIh4KC1JlcXVlc3RJbmZvEg8KB3Zl",
                    "cnNpb24YASABKAkiLgoQUmVxdWVzdFNldE9wdGlvbhILCgNrZXkYASABKAkS",
                    "DQoFdmFsdWUYAiABKAkiOAoQUmVxdWVzdEluaXRDaGFpbhIkCgp2YWxpZGF0",
                    "b3JzGAEgAygLMhAudHlwZXMuVmFsaWRhdG9yIkkKDFJlcXVlc3RRdWVyeRIM",
                    "CgRkYXRhGAEgASgMEgwKBHBhdGgYAiABKAkSDgoGaGVpZ2h0GAMgASgDEg0K",
                    "BXByb3ZlGAQgASgIIooBChFSZXF1ZXN0QmVnaW5CbG9jaxIMCgRoYXNoGAEg",
                    "ASgMEh0KBmhlYWRlchgCIAEoCzINLnR5cGVzLkhlYWRlchIZChFhYnNlbnRf",
                    "dmFsaWRhdG9ycxgDIAMoBRItChRieXphbnRpbmVfdmFsaWRhdG9ycxgEIAMo",
                    "CzIPLnR5cGVzLkV2aWRlbmNlIhwKDlJlcXVlc3RDaGVja1R4EgoKAnR4GAEg",
                    "ASgMIh4KEFJlcXVlc3REZWxpdmVyVHgSCgoCdHgYASABKAwiIQoPUmVxdWVz",
                    "dEVuZEJsb2NrEg4KBmhlaWdodBgBIAEoAyIPCg1SZXF1ZXN0Q29tbWl0Ip8E",
                    "CghSZXNwb25zZRItCglleGNlcHRpb24YASABKAsyGC50eXBlcy5SZXNwb25z",
                    "ZUV4Y2VwdGlvbkgAEiMKBGVjaG8YAiABKAsyEy50eXBlcy5SZXNwb25zZUVj",
                    "aG9IABIlCgVmbHVzaBgDIAEoCzIULnR5cGVzLlJlc3BvbnNlRmx1c2hIABIj",
                    "CgRpbmZvGAQgASgLMhMudHlwZXMuUmVzcG9uc2VJbmZvSAASLgoKc2V0X29w",
                    "dGlvbhgFIAEoCzIYLnR5cGVzLlJlc3BvbnNlU2V0T3B0aW9uSAASLgoKaW5p",
                    "dF9jaGFpbhgGIAEoCzIYLnR5cGVzLlJlc3BvbnNlSW5pdENoYWluSAASJQoF",
                    "cXVlcnkYByABKAsyFC50eXBlcy5SZXNwb25zZVF1ZXJ5SAASMAoLYmVnaW5f",
                    "YmxvY2sYCCABKAsyGS50eXBlcy5SZXNwb25zZUJlZ2luQmxvY2tIABIqCghj",
                    "aGVja190eBgJIAEoCzIWLnR5cGVzLlJlc3BvbnNlQ2hlY2tUeEgAEi4KCmRl",
                    "bGl2ZXJfdHgYCiABKAsyGC50eXBlcy5SZXNwb25zZURlbGl2ZXJUeEgAEiwK",
                    "CWVuZF9ibG9jaxgLIAEoCzIXLnR5cGVzLlJlc3BvbnNlRW5kQmxvY2tIABIn",
                    "CgZjb21taXQYDCABKAsyFS50eXBlcy5SZXNwb25zZUNvbW1pdEgAQgcKBXZh",
                    "bHVlIiIKEVJlc3BvbnNlRXhjZXB0aW9uEg0KBWVycm9yGAEgASgJIh8KDFJl",
                    "c3BvbnNlRWNobxIPCgdtZXNzYWdlGAEgASgJIg8KDVJlc3BvbnNlRmx1c2gi",
                    "ZQoMUmVzcG9uc2VJbmZvEgwKBGRhdGEYASABKAkSDwoHdmVyc2lvbhgCIAEo",
                    "CRIZChFsYXN0X2Jsb2NrX2hlaWdodBgDIAEoAxIbChNsYXN0X2Jsb2NrX2Fw",
                    "cF9oYXNoGAQgASgMIi4KEVJlc3BvbnNlU2V0T3B0aW9uEgwKBGNvZGUYASAB",
                    "KA0SCwoDbG9nGAIgASgJIhMKEVJlc3BvbnNlSW5pdENoYWluIooCCg1SZXNw",
                    "b25zZVF1ZXJ5EgwKBGNvZGUYASABKA0SDQoFaW5kZXgYAiABKAMSPQoDa2V5",
                    "GAMgASgMQjDa3h8oZ2l0aHViLmNvbS90ZW5kZXJtaW50L2dvLXdpcmUvZGF0",
                    "YS5CeXRlc8jeHwASPwoFdmFsdWUYBCABKAxCMNreHyhnaXRodWIuY29tL3Rl",
                    "bmRlcm1pbnQvZ28td2lyZS9kYXRhLkJ5dGVzyN4fABI/CgVwcm9vZhgFIAEo",
                    "DEIw2t4fKGdpdGh1Yi5jb20vdGVuZGVybWludC9nby13aXJlL2RhdGEuQnl0",
                    "ZXPI3h8AEg4KBmhlaWdodBgGIAEoAxILCgNsb2cYByABKAkiFAoSUmVzcG9u",
                    "c2VCZWdpbkJsb2NrIoYBCg9SZXNwb25zZUNoZWNrVHgSDAoEY29kZRgBIAEo",
                    "DRI+CgRkYXRhGAIgASgMQjDa3h8oZ2l0aHViLmNvbS90ZW5kZXJtaW50L2dv",
                    "LXdpcmUvZGF0YS5CeXRlc8jeHwASCwoDbG9nGAMgASgJEgsKA2dhcxgEIAEo",
                    "AxILCgNmZWUYBSABKAMiiwEKEVJlc3BvbnNlRGVsaXZlclR4EgwKBGNvZGUY",
                    "ASABKA0SPgoEZGF0YRgCIAEoDEIw2t4fKGdpdGh1Yi5jb20vdGVuZGVybWlu",
                    "dC9nby13aXJlL2RhdGEuQnl0ZXPI3h8AEgsKA2xvZxgDIAEoCRIbCgR0YWdz",
                    "GAQgAygLMg0udHlwZXMuS1ZQYWlyIngKEFJlc3BvbnNlRW5kQmxvY2sSKwoR",
                    "dmFsaWRhdG9yX3VwZGF0ZXMYASADKAsyEC50eXBlcy5WYWxpZGF0b3ISNwoX",
                    "Y29uc2Vuc3VzX3BhcmFtX3VwZGF0ZXMYAiABKAsyFi50eXBlcy5Db25zZW5z",
                    "dXNQYXJhbXMiawoOUmVzcG9uc2VDb21taXQSDAoEY29kZRgBIAEoDRI+CgRk",
                    "YXRhGAIgASgMQjDa3h8oZ2l0aHViLmNvbS90ZW5kZXJtaW50L2dvLXdpcmUv",
                    "ZGF0YS5CeXRlc8jeHwASCwoDbG9nGAMgASgJIoEBCg9Db25zZW5zdXNQYXJh",
                    "bXMSJAoKYmxvY2tfc2l6ZRgBIAEoCzIQLnR5cGVzLkJsb2NrU2l6ZRIeCgd0",
                    "eF9zaXplGAIgASgLMg0udHlwZXMuVHhTaXplEigKDGJsb2NrX2dvc3NpcBgD",
                    "IAEoCzISLnR5cGVzLkJsb2NrR29zc2lwIkAKCUJsb2NrU2l6ZRIRCgltYXhf",
                    "Ynl0ZXMYASABKAUSDwoHbWF4X3R4cxgCIAEoBRIPCgdtYXhfZ2FzGAMgASgD",
                    "IiwKBlR4U2l6ZRIRCgltYXhfYnl0ZXMYASABKAUSDwoHbWF4X2dhcxgCIAEo",
                    "AyIsCgtCbG9ja0dvc3NpcBIdChVibG9ja19wYXJ0X3NpemVfYnl0ZXMYASAB",
                    "KAUi5gEKBkhlYWRlchIdCghjaGFpbl9pZBgBIAEoCUIL4t4fB0NoYWluSUQS",
                    "DgoGaGVpZ2h0GAIgASgDEgwKBHRpbWUYAyABKAMSDwoHbnVtX3R4cxgEIAEo",
                    "BRI2Cg1sYXN0X2Jsb2NrX2lkGAUgASgLMg4udHlwZXMuQmxvY2tJREIP4t4f",
                    "C0xhc3RCbG9ja0lEEhgKEGxhc3RfY29tbWl0X2hhc2gYBiABKAwSEQoJZGF0",
                    "YV9oYXNoGAcgASgMEhcKD3ZhbGlkYXRvcnNfaGFzaBgIIAEoDBIQCghhcHBf",
                    "aGFzaBgJIAEoDCI8CgdCbG9ja0lEEgwKBGhhc2gYASABKAwSIwoFcGFydHMY",
                    "AiABKAsyFC50eXBlcy5QYXJ0U2V0SGVhZGVyIiwKDVBhcnRTZXRIZWFkZXIS",
                    "DQoFdG90YWwYASABKAUSDAoEaGFzaBgCIAEoDCIrCglWYWxpZGF0b3ISDwoH",
                    "cHViX2tleRgBIAEoDBINCgVwb3dlchgCIAEoAyIrCghFdmlkZW5jZRIPCgdw",
                    "dWJfa2V5GAEgASgMEg4KBmhlaWdodBgCIAEoAyKDAQoGS1ZQYWlyEgsKA2tl",
                    "eRgBIAEoCRImCgp2YWx1ZV90eXBlGAIgASgOMhIudHlwZXMuS1ZQYWlyLlR5",
                    "cGUSFAoMdmFsdWVfc3RyaW5nGAMgASgJEhEKCXZhbHVlX2ludBgEIAEoAyIb",
                    "CgRUeXBlEgoKBlNUUklORxAAEgcKA0lOVBABMowFCg9BQkNJQXBwbGljYXRp",
                    "b24SLwoERWNobxISLnR5cGVzLlJlcXVlc3RFY2hvGhMudHlwZXMuUmVzcG9u",
                    "c2VFY2hvEjIKBUZsdXNoEhMudHlwZXMuUmVxdWVzdEZsdXNoGhQudHlwZXMu",
                    "UmVzcG9uc2VGbHVzaBIvCgRJbmZvEhIudHlwZXMuUmVxdWVzdEluZm8aEy50",
                    "eXBlcy5SZXNwb25zZUluZm8SPgoJU2V0T3B0aW9uEhcudHlwZXMuUmVxdWVz",
                    "dFNldE9wdGlvbhoYLnR5cGVzLlJlc3BvbnNlU2V0T3B0aW9uEj4KCURlbGl2",
                    "ZXJUeBIXLnR5cGVzLlJlcXVlc3REZWxpdmVyVHgaGC50eXBlcy5SZXNwb25z",
                    "ZURlbGl2ZXJUeBI4CgdDaGVja1R4EhUudHlwZXMuUmVxdWVzdENoZWNrVHga",
                    "Fi50eXBlcy5SZXNwb25zZUNoZWNrVHgSMgoFUXVlcnkSEy50eXBlcy5SZXF1",
                    "ZXN0UXVlcnkaFC50eXBlcy5SZXNwb25zZVF1ZXJ5EjUKBkNvbW1pdBIULnR5",
                    "cGVzLlJlcXVlc3RDb21taXQaFS50eXBlcy5SZXNwb25zZUNvbW1pdBI+CglJ",
                    "bml0Q2hhaW4SFy50eXBlcy5SZXF1ZXN0SW5pdENoYWluGhgudHlwZXMuUmVz",
                    "cG9uc2VJbml0Q2hhaW4SQQoKQmVnaW5CbG9jaxIYLnR5cGVzLlJlcXVlc3RC",
                    "ZWdpbkJsb2NrGhkudHlwZXMuUmVzcG9uc2VCZWdpbkJsb2NrEjsKCEVuZEJs",
                    "b2NrEhYudHlwZXMuUmVxdWVzdEVuZEJsb2NrGhcudHlwZXMuUmVzcG9uc2VF",
                    "bmRCbG9ja2IGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[]
                {
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.Request), global::Types.Request.Parser,
                        new[] { "Echo", "Flush", "Info", "SetOption", "InitChain", "Query", "BeginBlock", "CheckTx", "DeliverTx", "EndBlock", "Commit" }, new[] { "Value" }, null,
                        null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.RequestEcho), global::Types.RequestEcho.Parser, new[] { "Message" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.RequestFlush), global::Types.RequestFlush.Parser, null, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.RequestInfo), global::Types.RequestInfo.Parser, new[] { "Version" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.RequestSetOption), global::Types.RequestSetOption.Parser, new[] { "Key", "Value" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.RequestInitChain), global::Types.RequestInitChain.Parser, new[] { "Validators" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.RequestQuery), global::Types.RequestQuery.Parser, new[] { "Data", "Path", "Height", "Prove" }, null, null,
                        null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.RequestBeginBlock), global::Types.RequestBeginBlock.Parser,
                        new[] { "Hash", "Header", "AbsentValidators", "ByzantineValidators" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.RequestCheckTx), global::Types.RequestCheckTx.Parser, new[] { "Tx" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.RequestDeliverTx), global::Types.RequestDeliverTx.Parser, new[] { "Tx" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.RequestEndBlock), global::Types.RequestEndBlock.Parser, new[] { "Height" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.RequestCommit), global::Types.RequestCommit.Parser, null, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.Response), global::Types.Response.Parser,
                        new[] { "Exception", "Echo", "Flush", "Info", "SetOption", "InitChain", "Query", "BeginBlock", "CheckTx", "DeliverTx", "EndBlock", "Commit" },
                        new[] { "Value" }, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.ResponseException), global::Types.ResponseException.Parser, new[] { "Error" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.ResponseEcho), global::Types.ResponseEcho.Parser, new[] { "Message" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.ResponseFlush), global::Types.ResponseFlush.Parser, null, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.ResponseInfo), global::Types.ResponseInfo.Parser,
                        new[] { "Data", "Version", "LastBlockHeight", "LastBlockAppHash" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.ResponseSetOption), global::Types.ResponseSetOption.Parser, new[] { "Code", "Log" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.ResponseInitChain), global::Types.ResponseInitChain.Parser, null, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.ResponseQuery), global::Types.ResponseQuery.Parser,
                        new[] { "Code", "Index", "Key", "Value", "Proof", "Height", "Log" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.ResponseBeginBlock), global::Types.ResponseBeginBlock.Parser, null, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.ResponseCheckTx), global::Types.ResponseCheckTx.Parser, new[] { "Code", "Data", "Log", "Gas", "Fee" }, null,
                        null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.ResponseDeliverTx), global::Types.ResponseDeliverTx.Parser, new[] { "Code", "Data", "Log", "Tags" }, null,
                        null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.ResponseEndBlock), global::Types.ResponseEndBlock.Parser,
                        new[] { "ValidatorUpdates", "ConsensusParamUpdates" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.ResponseCommit), global::Types.ResponseCommit.Parser, new[] { "Code", "Data", "Log" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.ConsensusParams), global::Types.ConsensusParams.Parser, new[] { "BlockSize", "TxSize", "BlockGossip" }, null,
                        null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.BlockSize), global::Types.BlockSize.Parser, new[] { "MaxBytes", "MaxTxs", "MaxGas" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.TxSize), global::Types.TxSize.Parser, new[] { "MaxBytes", "MaxGas" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.BlockGossip), global::Types.BlockGossip.Parser, new[] { "BlockPartSizeBytes" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.Header), global::Types.Header.Parser,
                        new[] { "ChainId", "Height", "Time", "NumTxs", "LastBlockId", "LastCommitHash", "DataHash", "ValidatorsHash", "AppHash" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.BlockID), global::Types.BlockID.Parser, new[] { "Hash", "Parts" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.PartSetHeader), global::Types.PartSetHeader.Parser, new[] { "Total", "Hash" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.Validator), global::Types.Validator.Parser, new[] { "PubKey", "Power" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.Evidence), global::Types.Evidence.Parser, new[] { "PubKey", "Height" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Types.KVPair), global::Types.KVPair.Parser, new[] { "Key", "ValueType", "ValueString", "ValueInt" }, null,
                        new[] { typeof(global::Types.KVPair.Types.Type) }, null)
                }));
        }

        #endregion
    }

    #region Messages

    public sealed partial class Request : pb::IMessage<Request>
    {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this()
        {
            switch (other.ValueCase)
            {
                case ValueOneofCase.Echo:
                    Echo = other.Echo.Clone();
                    break;
                case ValueOneofCase.Flush:
                    Flush = other.Flush.Clone();
                    break;
                case ValueOneofCase.Info:
                    Info = other.Info.Clone();
                    break;
                case ValueOneofCase.SetOption:
                    SetOption = other.SetOption.Clone();
                    break;
                case ValueOneofCase.InitChain:
                    InitChain = other.InitChain.Clone();
                    break;
                case ValueOneofCase.Query:
                    Query = other.Query.Clone();
                    break;
                case ValueOneofCase.BeginBlock:
                    BeginBlock = other.BeginBlock.Clone();
                    break;
                case ValueOneofCase.CheckTx:
                    CheckTx = other.CheckTx.Clone();
                    break;
                case ValueOneofCase.DeliverTx:
                    DeliverTx = other.DeliverTx.Clone();
                    break;
                case ValueOneofCase.EndBlock:
                    EndBlock = other.EndBlock.Clone();
                    break;
                case ValueOneofCase.Commit:
                    Commit = other.Commit.Clone();
                    break;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone()
        {
            return new Request(this);
        }

        /// <summary>Field number for the "echo" field.</summary>
        public const int EchoFieldNumber = 2;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.RequestEcho Echo
        {
            get { return valueCase_ == ValueOneofCase.Echo ? (global::Types.RequestEcho) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Echo;
            }
        }

        /// <summary>Field number for the "flush" field.</summary>
        public const int FlushFieldNumber = 3;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.RequestFlush Flush
        {
            get { return valueCase_ == ValueOneofCase.Flush ? (global::Types.RequestFlush) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Flush;
            }
        }

        /// <summary>Field number for the "info" field.</summary>
        public const int InfoFieldNumber = 4;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.RequestInfo Info
        {
            get { return valueCase_ == ValueOneofCase.Info ? (global::Types.RequestInfo) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Info;
            }
        }

        /// <summary>Field number for the "set_option" field.</summary>
        public const int SetOptionFieldNumber = 5;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.RequestSetOption SetOption
        {
            get { return valueCase_ == ValueOneofCase.SetOption ? (global::Types.RequestSetOption) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.SetOption;
            }
        }

        /// <summary>Field number for the "init_chain" field.</summary>
        public const int InitChainFieldNumber = 6;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.RequestInitChain InitChain
        {
            get { return valueCase_ == ValueOneofCase.InitChain ? (global::Types.RequestInitChain) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.InitChain;
            }
        }

        /// <summary>Field number for the "query" field.</summary>
        public const int QueryFieldNumber = 7;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.RequestQuery Query
        {
            get { return valueCase_ == ValueOneofCase.Query ? (global::Types.RequestQuery) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Query;
            }
        }

        /// <summary>Field number for the "begin_block" field.</summary>
        public const int BeginBlockFieldNumber = 8;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.RequestBeginBlock BeginBlock
        {
            get { return valueCase_ == ValueOneofCase.BeginBlock ? (global::Types.RequestBeginBlock) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.BeginBlock;
            }
        }

        /// <summary>Field number for the "check_tx" field.</summary>
        public const int CheckTxFieldNumber = 9;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.RequestCheckTx CheckTx
        {
            get { return valueCase_ == ValueOneofCase.CheckTx ? (global::Types.RequestCheckTx) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.CheckTx;
            }
        }

        /// <summary>Field number for the "deliver_tx" field.</summary>
        public const int DeliverTxFieldNumber = 19;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.RequestDeliverTx DeliverTx
        {
            get { return valueCase_ == ValueOneofCase.DeliverTx ? (global::Types.RequestDeliverTx) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.DeliverTx;
            }
        }

        /// <summary>Field number for the "end_block" field.</summary>
        public const int EndBlockFieldNumber = 11;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.RequestEndBlock EndBlock
        {
            get { return valueCase_ == ValueOneofCase.EndBlock ? (global::Types.RequestEndBlock) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.EndBlock;
            }
        }

        /// <summary>Field number for the "commit" field.</summary>
        public const int CommitFieldNumber = 12;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.RequestCommit Commit
        {
            get { return valueCase_ == ValueOneofCase.Commit ? (global::Types.RequestCommit) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Commit;
            }
        }

        private object value_;

        /// <summary>Enum of possible cases for the "value" oneof.</summary>
        public enum ValueOneofCase
        {
            None = 0,
            Echo = 2,
            Flush = 3,
            Info = 4,
            SetOption = 5,
            InitChain = 6,
            Query = 7,
            BeginBlock = 8,
            CheckTx = 9,
            DeliverTx = 19,
            EndBlock = 11,
            Commit = 12,
        }

        private ValueOneofCase valueCase_ = ValueOneofCase.None;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueOneofCase ValueCase
        {
            get { return valueCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue()
        {
            valueCase_ = ValueOneofCase.None;
            value_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!Equals(Echo, other.Echo)) return false;
            if (!Equals(Flush, other.Flush)) return false;
            if (!Equals(Info, other.Info)) return false;
            if (!Equals(SetOption, other.SetOption)) return false;
            if (!Equals(InitChain, other.InitChain)) return false;
            if (!Equals(Query, other.Query)) return false;
            if (!Equals(BeginBlock, other.BeginBlock)) return false;
            if (!Equals(CheckTx, other.CheckTx)) return false;
            if (!Equals(DeliverTx, other.DeliverTx)) return false;
            if (!Equals(EndBlock, other.EndBlock)) return false;
            if (!Equals(Commit, other.Commit)) return false;
            if (ValueCase != other.ValueCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (valueCase_ == ValueOneofCase.Echo) hash ^= Echo.GetHashCode();
            if (valueCase_ == ValueOneofCase.Flush) hash ^= Flush.GetHashCode();
            if (valueCase_ == ValueOneofCase.Info) hash ^= Info.GetHashCode();
            if (valueCase_ == ValueOneofCase.SetOption) hash ^= SetOption.GetHashCode();
            if (valueCase_ == ValueOneofCase.InitChain) hash ^= InitChain.GetHashCode();
            if (valueCase_ == ValueOneofCase.Query) hash ^= Query.GetHashCode();
            if (valueCase_ == ValueOneofCase.BeginBlock) hash ^= BeginBlock.GetHashCode();
            if (valueCase_ == ValueOneofCase.CheckTx) hash ^= CheckTx.GetHashCode();
            if (valueCase_ == ValueOneofCase.DeliverTx) hash ^= DeliverTx.GetHashCode();
            if (valueCase_ == ValueOneofCase.EndBlock) hash ^= EndBlock.GetHashCode();
            if (valueCase_ == ValueOneofCase.Commit) hash ^= Commit.GetHashCode();
            hash ^= (int) valueCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (valueCase_ == ValueOneofCase.Echo)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Echo);
            }

            if (valueCase_ == ValueOneofCase.Flush)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Flush);
            }

            if (valueCase_ == ValueOneofCase.Info)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Info);
            }

            if (valueCase_ == ValueOneofCase.SetOption)
            {
                output.WriteRawTag(42);
                output.WriteMessage(SetOption);
            }

            if (valueCase_ == ValueOneofCase.InitChain)
            {
                output.WriteRawTag(50);
                output.WriteMessage(InitChain);
            }

            if (valueCase_ == ValueOneofCase.Query)
            {
                output.WriteRawTag(58);
                output.WriteMessage(Query);
            }

            if (valueCase_ == ValueOneofCase.BeginBlock)
            {
                output.WriteRawTag(66);
                output.WriteMessage(BeginBlock);
            }

            if (valueCase_ == ValueOneofCase.CheckTx)
            {
                output.WriteRawTag(74);
                output.WriteMessage(CheckTx);
            }

            if (valueCase_ == ValueOneofCase.EndBlock)
            {
                output.WriteRawTag(90);
                output.WriteMessage(EndBlock);
            }

            if (valueCase_ == ValueOneofCase.Commit)
            {
                output.WriteRawTag(98);
                output.WriteMessage(Commit);
            }

            if (valueCase_ == ValueOneofCase.DeliverTx)
            {
                output.WriteRawTag(154, 1);
                output.WriteMessage(DeliverTx);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (valueCase_ == ValueOneofCase.Echo)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Echo);
            }

            if (valueCase_ == ValueOneofCase.Flush)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flush);
            }

            if (valueCase_ == ValueOneofCase.Info)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
            }

            if (valueCase_ == ValueOneofCase.SetOption)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetOption);
            }

            if (valueCase_ == ValueOneofCase.InitChain)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitChain);
            }

            if (valueCase_ == ValueOneofCase.Query)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
            }

            if (valueCase_ == ValueOneofCase.BeginBlock)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(BeginBlock);
            }

            if (valueCase_ == ValueOneofCase.CheckTx)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckTx);
            }

            if (valueCase_ == ValueOneofCase.DeliverTx)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeliverTx);
            }

            if (valueCase_ == ValueOneofCase.EndBlock)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndBlock);
            }

            if (valueCase_ == ValueOneofCase.Commit)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commit);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other)
        {
            if (other == null)
            {
                return;
            }

            switch (other.ValueCase)
            {
                case ValueOneofCase.Echo:
                    if (Echo == null)
                    {
                        Echo = new global::Types.RequestEcho();
                    }

                    Echo.MergeFrom(other.Echo);
                    break;
                case ValueOneofCase.Flush:
                    if (Flush == null)
                    {
                        Flush = new global::Types.RequestFlush();
                    }

                    Flush.MergeFrom(other.Flush);
                    break;
                case ValueOneofCase.Info:
                    if (Info == null)
                    {
                        Info = new global::Types.RequestInfo();
                    }

                    Info.MergeFrom(other.Info);
                    break;
                case ValueOneofCase.SetOption:
                    if (SetOption == null)
                    {
                        SetOption = new global::Types.RequestSetOption();
                    }

                    SetOption.MergeFrom(other.SetOption);
                    break;
                case ValueOneofCase.InitChain:
                    if (InitChain == null)
                    {
                        InitChain = new global::Types.RequestInitChain();
                    }

                    InitChain.MergeFrom(other.InitChain);
                    break;
                case ValueOneofCase.Query:
                    if (Query == null)
                    {
                        Query = new global::Types.RequestQuery();
                    }

                    Query.MergeFrom(other.Query);
                    break;
                case ValueOneofCase.BeginBlock:
                    if (BeginBlock == null)
                    {
                        BeginBlock = new global::Types.RequestBeginBlock();
                    }

                    BeginBlock.MergeFrom(other.BeginBlock);
                    break;
                case ValueOneofCase.CheckTx:
                    if (CheckTx == null)
                    {
                        CheckTx = new global::Types.RequestCheckTx();
                    }

                    CheckTx.MergeFrom(other.CheckTx);
                    break;
                case ValueOneofCase.DeliverTx:
                    if (DeliverTx == null)
                    {
                        DeliverTx = new global::Types.RequestDeliverTx();
                    }

                    DeliverTx.MergeFrom(other.DeliverTx);
                    break;
                case ValueOneofCase.EndBlock:
                    if (EndBlock == null)
                    {
                        EndBlock = new global::Types.RequestEndBlock();
                    }

                    EndBlock.MergeFrom(other.EndBlock);
                    break;
                case ValueOneofCase.Commit:
                    if (Commit == null)
                    {
                        Commit = new global::Types.RequestCommit();
                    }

                    Commit.MergeFrom(other.Commit);
                    break;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 18:
                    {
                        global::Types.RequestEcho subBuilder = new global::Types.RequestEcho();
                        if (valueCase_ == ValueOneofCase.Echo)
                        {
                            subBuilder.MergeFrom(Echo);
                        }

                        input.ReadMessage(subBuilder);
                        Echo = subBuilder;
                        break;
                    }
                    case 26:
                    {
                        global::Types.RequestFlush subBuilder = new global::Types.RequestFlush();
                        if (valueCase_ == ValueOneofCase.Flush)
                        {
                            subBuilder.MergeFrom(Flush);
                        }

                        input.ReadMessage(subBuilder);
                        Flush = subBuilder;
                        break;
                    }
                    case 34:
                    {
                        global::Types.RequestInfo subBuilder = new global::Types.RequestInfo();
                        if (valueCase_ == ValueOneofCase.Info)
                        {
                            subBuilder.MergeFrom(Info);
                        }

                        input.ReadMessage(subBuilder);
                        Info = subBuilder;
                        break;
                    }
                    case 42:
                    {
                        global::Types.RequestSetOption subBuilder = new global::Types.RequestSetOption();
                        if (valueCase_ == ValueOneofCase.SetOption)
                        {
                            subBuilder.MergeFrom(SetOption);
                        }

                        input.ReadMessage(subBuilder);
                        SetOption = subBuilder;
                        break;
                    }
                    case 50:
                    {
                        global::Types.RequestInitChain subBuilder = new global::Types.RequestInitChain();
                        if (valueCase_ == ValueOneofCase.InitChain)
                        {
                            subBuilder.MergeFrom(InitChain);
                        }

                        input.ReadMessage(subBuilder);
                        InitChain = subBuilder;
                        break;
                    }
                    case 58:
                    {
                        global::Types.RequestQuery subBuilder = new global::Types.RequestQuery();
                        if (valueCase_ == ValueOneofCase.Query)
                        {
                            subBuilder.MergeFrom(Query);
                        }

                        input.ReadMessage(subBuilder);
                        Query = subBuilder;
                        break;
                    }
                    case 66:
                    {
                        global::Types.RequestBeginBlock subBuilder = new global::Types.RequestBeginBlock();
                        if (valueCase_ == ValueOneofCase.BeginBlock)
                        {
                            subBuilder.MergeFrom(BeginBlock);
                        }

                        input.ReadMessage(subBuilder);
                        BeginBlock = subBuilder;
                        break;
                    }
                    case 74:
                    {
                        global::Types.RequestCheckTx subBuilder = new global::Types.RequestCheckTx();
                        if (valueCase_ == ValueOneofCase.CheckTx)
                        {
                            subBuilder.MergeFrom(CheckTx);
                        }

                        input.ReadMessage(subBuilder);
                        CheckTx = subBuilder;
                        break;
                    }
                    case 90:
                    {
                        global::Types.RequestEndBlock subBuilder = new global::Types.RequestEndBlock();
                        if (valueCase_ == ValueOneofCase.EndBlock)
                        {
                            subBuilder.MergeFrom(EndBlock);
                        }

                        input.ReadMessage(subBuilder);
                        EndBlock = subBuilder;
                        break;
                    }
                    case 98:
                    {
                        global::Types.RequestCommit subBuilder = new global::Types.RequestCommit();
                        if (valueCase_ == ValueOneofCase.Commit)
                        {
                            subBuilder.MergeFrom(Commit);
                        }

                        input.ReadMessage(subBuilder);
                        Commit = subBuilder;
                        break;
                    }
                    case 154:
                    {
                        global::Types.RequestDeliverTx subBuilder = new global::Types.RequestDeliverTx();
                        if (valueCase_ == ValueOneofCase.DeliverTx)
                        {
                            subBuilder.MergeFrom(DeliverTx);
                        }

                        input.ReadMessage(subBuilder);
                        DeliverTx = subBuilder;
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class RequestEcho : pb::IMessage<RequestEcho>
    {
        private static readonly pb::MessageParser<RequestEcho> _parser = new pb::MessageParser<RequestEcho>(() => new RequestEcho());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestEcho> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestEcho()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestEcho(RequestEcho other) : this()
        {
            message_ = other.message_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestEcho Clone()
        {
            return new RequestEcho(this);
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 1;

        private string message_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message
        {
            get { return message_; }
            set { message_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestEcho);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestEcho other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Message != other.Message) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Message.Length != 0) hash ^= Message.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Message.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Message);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Message.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestEcho other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Message.Length != 0)
            {
                Message = other.Message;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Message = input.ReadString();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class RequestFlush : pb::IMessage<RequestFlush>
    {
        private static readonly pb::MessageParser<RequestFlush> _parser = new pb::MessageParser<RequestFlush>(() => new RequestFlush());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestFlush> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestFlush()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestFlush(RequestFlush other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestFlush Clone()
        {
            return new RequestFlush(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestFlush);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestFlush other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestFlush other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }
    }

    public sealed partial class RequestInfo : pb::IMessage<RequestInfo>
    {
        private static readonly pb::MessageParser<RequestInfo> _parser = new pb::MessageParser<RequestInfo>(() => new RequestInfo());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestInfo> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestInfo(RequestInfo other) : this()
        {
            version_ = other.version_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestInfo Clone()
        {
            return new RequestInfo(this);
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 1;

        private string version_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version
        {
            get { return version_; }
            set { version_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Version != other.Version) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Version.Length != 0) hash ^= Version.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Version.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Version);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Version.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestInfo other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Version.Length != 0)
            {
                Version = other.Version;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Version = input.ReadString();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class RequestSetOption : pb::IMessage<RequestSetOption>
    {
        private static readonly pb::MessageParser<RequestSetOption> _parser = new pb::MessageParser<RequestSetOption>(() => new RequestSetOption());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestSetOption> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestSetOption()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestSetOption(RequestSetOption other) : this()
        {
            key_ = other.key_;
            value_ = other.value_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestSetOption Clone()
        {
            return new RequestSetOption(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;

        private string key_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key
        {
            get { return key_; }
            set { key_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;

        private string value_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value
        {
            get { return value_; }
            set { value_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestSetOption);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestSetOption other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Key != other.Key) return false;
            if (Value != other.Value) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Key.Length != 0) hash ^= Key.GetHashCode();
            if (Value.Length != 0) hash ^= Value.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Key.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Key);
            }

            if (Value.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Value);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Key.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
            }

            if (Value.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestSetOption other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Key.Length != 0)
            {
                Key = other.Key;
            }

            if (other.Value.Length != 0)
            {
                Value = other.Value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Key = input.ReadString();
                        break;
                    }
                    case 18:
                    {
                        Value = input.ReadString();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class RequestInitChain : pb::IMessage<RequestInitChain>
    {
        private static readonly pb::MessageParser<RequestInitChain> _parser = new pb::MessageParser<RequestInitChain>(() => new RequestInitChain());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestInitChain> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestInitChain()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestInitChain(RequestInitChain other) : this()
        {
            validators_ = other.validators_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestInitChain Clone()
        {
            return new RequestInitChain(this);
        }

        /// <summary>Field number for the "validators" field.</summary>
        public const int ValidatorsFieldNumber = 1;

        private static readonly pb::FieldCodec<global::Types.Validator> _repeated_validators_codec
            = pb::FieldCodec.ForMessage(10, global::Types.Validator.Parser);

        private readonly pbc::RepeatedField<global::Types.Validator> validators_ = new pbc::RepeatedField<global::Types.Validator>();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Types.Validator> Validators
        {
            get { return validators_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestInitChain);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestInitChain other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!validators_.Equals(other.validators_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= validators_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            validators_.WriteTo(output, _repeated_validators_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += validators_.CalculateSize(_repeated_validators_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestInitChain other)
        {
            if (other == null)
            {
                return;
            }

            validators_.Add(other.validators_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        validators_.AddEntriesFrom(input, _repeated_validators_codec);
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class RequestQuery : pb::IMessage<RequestQuery>
    {
        private static readonly pb::MessageParser<RequestQuery> _parser = new pb::MessageParser<RequestQuery>(() => new RequestQuery());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestQuery> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuery()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuery(RequestQuery other) : this()
        {
            data_ = other.data_;
            path_ = other.path_;
            height_ = other.height_;
            prove_ = other.prove_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuery Clone()
        {
            return new RequestQuery(this);
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 1;

        private pb::ByteString data_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data
        {
            get { return data_; }
            set { data_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "path" field.</summary>
        public const int PathFieldNumber = 2;

        private string path_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path
        {
            get { return path_; }
            set { path_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 3;

        private long height_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Height
        {
            get { return height_; }
            set { height_ = value; }
        }

        /// <summary>Field number for the "prove" field.</summary>
        public const int ProveFieldNumber = 4;

        private bool prove_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Prove
        {
            get { return prove_; }
            set { prove_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestQuery);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestQuery other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Data != other.Data) return false;
            if (Path != other.Path) return false;
            if (Height != other.Height) return false;
            if (Prove != other.Prove) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Data.Length != 0) hash ^= Data.GetHashCode();
            if (Path.Length != 0) hash ^= Path.GetHashCode();
            if (Height != 0L) hash ^= Height.GetHashCode();
            if (Prove != false) hash ^= Prove.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Data.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(Data);
            }

            if (Path.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Path);
            }

            if (Height != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(Height);
            }

            if (Prove != false)
            {
                output.WriteRawTag(32);
                output.WriteBool(Prove);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Data.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
            }

            if (Path.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
            }

            if (Height != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
            }

            if (Prove != false)
            {
                size += 1 + 1;
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestQuery other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Data.Length != 0)
            {
                Data = other.Data;
            }

            if (other.Path.Length != 0)
            {
                Path = other.Path;
            }

            if (other.Height != 0L)
            {
                Height = other.Height;
            }

            if (other.Prove != false)
            {
                Prove = other.Prove;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Data = input.ReadBytes();
                        break;
                    }
                    case 18:
                    {
                        Path = input.ReadString();
                        break;
                    }
                    case 24:
                    {
                        Height = input.ReadInt64();
                        break;
                    }
                    case 32:
                    {
                        Prove = input.ReadBool();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class RequestBeginBlock : pb::IMessage<RequestBeginBlock>
    {
        private static readonly pb::MessageParser<RequestBeginBlock> _parser = new pb::MessageParser<RequestBeginBlock>(() => new RequestBeginBlock());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestBeginBlock> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestBeginBlock()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestBeginBlock(RequestBeginBlock other) : this()
        {
            hash_ = other.hash_;
            Header = other.header_ != null ? other.Header.Clone() : null;
            absentValidators_ = other.absentValidators_.Clone();
            byzantineValidators_ = other.byzantineValidators_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestBeginBlock Clone()
        {
            return new RequestBeginBlock(this);
        }

        /// <summary>Field number for the "hash" field.</summary>
        public const int HashFieldNumber = 1;

        private pb::ByteString hash_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Hash
        {
            get { return hash_; }
            set { hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "header" field.</summary>
        public const int HeaderFieldNumber = 2;

        private global::Types.Header header_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.Header Header
        {
            get { return header_; }
            set { header_ = value; }
        }

        /// <summary>Field number for the "absent_validators" field.</summary>
        public const int AbsentValidatorsFieldNumber = 3;

        private static readonly pb::FieldCodec<int> _repeated_absentValidators_codec
            = pb::FieldCodec.ForInt32(26);

        private readonly pbc::RepeatedField<int> absentValidators_ = new pbc::RepeatedField<int>();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> AbsentValidators
        {
            get { return absentValidators_; }
        }

        /// <summary>Field number for the "byzantine_validators" field.</summary>
        public const int ByzantineValidatorsFieldNumber = 4;

        private static readonly pb::FieldCodec<global::Types.Evidence> _repeated_byzantineValidators_codec
            = pb::FieldCodec.ForMessage(34, global::Types.Evidence.Parser);

        private readonly pbc::RepeatedField<global::Types.Evidence> byzantineValidators_ = new pbc::RepeatedField<global::Types.Evidence>();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Types.Evidence> ByzantineValidators
        {
            get { return byzantineValidators_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestBeginBlock);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestBeginBlock other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Hash != other.Hash) return false;
            if (!Equals(Header, other.Header)) return false;
            if (!absentValidators_.Equals(other.absentValidators_)) return false;
            if (!byzantineValidators_.Equals(other.byzantineValidators_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Hash.Length != 0) hash ^= Hash.GetHashCode();
            if (header_ != null) hash ^= Header.GetHashCode();
            hash ^= absentValidators_.GetHashCode();
            hash ^= byzantineValidators_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Hash.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(Hash);
            }

            if (header_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Header);
            }

            absentValidators_.WriteTo(output, _repeated_absentValidators_codec);
            byzantineValidators_.WriteTo(output, _repeated_byzantineValidators_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Hash.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
            }

            if (header_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
            }

            size += absentValidators_.CalculateSize(_repeated_absentValidators_codec);
            size += byzantineValidators_.CalculateSize(_repeated_byzantineValidators_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestBeginBlock other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Hash.Length != 0)
            {
                Hash = other.Hash;
            }

            if (other.header_ != null)
            {
                if (header_ == null)
                {
                    header_ = new global::Types.Header();
                }

                Header.MergeFrom(other.Header);
            }

            absentValidators_.Add(other.absentValidators_);
            byzantineValidators_.Add(other.byzantineValidators_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Hash = input.ReadBytes();
                        break;
                    }
                    case 18:
                    {
                        if (header_ == null)
                        {
                            header_ = new global::Types.Header();
                        }

                        input.ReadMessage(header_);
                        break;
                    }
                    case 26:
                    case 24:
                    {
                        absentValidators_.AddEntriesFrom(input, _repeated_absentValidators_codec);
                        break;
                    }
                    case 34:
                    {
                        byzantineValidators_.AddEntriesFrom(input, _repeated_byzantineValidators_codec);
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class RequestCheckTx : pb::IMessage<RequestCheckTx>
    {
        private static readonly pb::MessageParser<RequestCheckTx> _parser = new pb::MessageParser<RequestCheckTx>(() => new RequestCheckTx());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestCheckTx> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestCheckTx()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestCheckTx(RequestCheckTx other) : this()
        {
            tx_ = other.tx_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestCheckTx Clone()
        {
            return new RequestCheckTx(this);
        }

        /// <summary>Field number for the "tx" field.</summary>
        public const int TxFieldNumber = 1;

        private pb::ByteString tx_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Tx
        {
            get { return tx_; }
            set { tx_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestCheckTx);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestCheckTx other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Tx != other.Tx) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Tx.Length != 0) hash ^= Tx.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Tx.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(Tx);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Tx.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Tx);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestCheckTx other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Tx.Length != 0)
            {
                Tx = other.Tx;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Tx = input.ReadBytes();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class RequestDeliverTx : pb::IMessage<RequestDeliverTx>
    {
        private static readonly pb::MessageParser<RequestDeliverTx> _parser = new pb::MessageParser<RequestDeliverTx>(() => new RequestDeliverTx());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestDeliverTx> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestDeliverTx()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestDeliverTx(RequestDeliverTx other) : this()
        {
            tx_ = other.tx_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestDeliverTx Clone()
        {
            return new RequestDeliverTx(this);
        }

        /// <summary>Field number for the "tx" field.</summary>
        public const int TxFieldNumber = 1;

        private pb::ByteString tx_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Tx
        {
            get { return tx_; }
            set { tx_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestDeliverTx);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestDeliverTx other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Tx != other.Tx) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Tx.Length != 0) hash ^= Tx.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Tx.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(Tx);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Tx.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Tx);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestDeliverTx other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Tx.Length != 0)
            {
                Tx = other.Tx;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Tx = input.ReadBytes();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class RequestEndBlock : pb::IMessage<RequestEndBlock>
    {
        private static readonly pb::MessageParser<RequestEndBlock> _parser = new pb::MessageParser<RequestEndBlock>(() => new RequestEndBlock());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestEndBlock> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestEndBlock()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestEndBlock(RequestEndBlock other) : this()
        {
            height_ = other.height_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestEndBlock Clone()
        {
            return new RequestEndBlock(this);
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 1;

        private long height_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Height
        {
            get { return height_; }
            set { height_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestEndBlock);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestEndBlock other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Height != other.Height) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Height != 0L) hash ^= Height.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Height != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Height);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Height != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestEndBlock other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Height != 0L)
            {
                Height = other.Height;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Height = input.ReadInt64();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class RequestCommit : pb::IMessage<RequestCommit>
    {
        private static readonly pb::MessageParser<RequestCommit> _parser = new pb::MessageParser<RequestCommit>(() => new RequestCommit());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestCommit> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestCommit()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestCommit(RequestCommit other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestCommit Clone()
        {
            return new RequestCommit(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestCommit);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestCommit other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestCommit other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }
    }

    public sealed partial class Response : pb::IMessage<Response>
    {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this()
        {
            switch (other.ValueCase)
            {
                case ValueOneofCase.Exception:
                    Exception = other.Exception.Clone();
                    break;
                case ValueOneofCase.Echo:
                    Echo = other.Echo.Clone();
                    break;
                case ValueOneofCase.Flush:
                    Flush = other.Flush.Clone();
                    break;
                case ValueOneofCase.Info:
                    Info = other.Info.Clone();
                    break;
                case ValueOneofCase.SetOption:
                    SetOption = other.SetOption.Clone();
                    break;
                case ValueOneofCase.InitChain:
                    InitChain = other.InitChain.Clone();
                    break;
                case ValueOneofCase.Query:
                    Query = other.Query.Clone();
                    break;
                case ValueOneofCase.BeginBlock:
                    BeginBlock = other.BeginBlock.Clone();
                    break;
                case ValueOneofCase.CheckTx:
                    CheckTx = other.CheckTx.Clone();
                    break;
                case ValueOneofCase.DeliverTx:
                    DeliverTx = other.DeliverTx.Clone();
                    break;
                case ValueOneofCase.EndBlock:
                    EndBlock = other.EndBlock.Clone();
                    break;
                case ValueOneofCase.Commit:
                    Commit = other.Commit.Clone();
                    break;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone()
        {
            return new Response(this);
        }

        /// <summary>Field number for the "exception" field.</summary>
        public const int ExceptionFieldNumber = 1;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.ResponseException Exception
        {
            get { return valueCase_ == ValueOneofCase.Exception ? (global::Types.ResponseException) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Exception;
            }
        }

        /// <summary>Field number for the "echo" field.</summary>
        public const int EchoFieldNumber = 2;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.ResponseEcho Echo
        {
            get { return valueCase_ == ValueOneofCase.Echo ? (global::Types.ResponseEcho) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Echo;
            }
        }

        /// <summary>Field number for the "flush" field.</summary>
        public const int FlushFieldNumber = 3;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.ResponseFlush Flush
        {
            get { return valueCase_ == ValueOneofCase.Flush ? (global::Types.ResponseFlush) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Flush;
            }
        }

        /// <summary>Field number for the "info" field.</summary>
        public const int InfoFieldNumber = 4;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.ResponseInfo Info
        {
            get { return valueCase_ == ValueOneofCase.Info ? (global::Types.ResponseInfo) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Info;
            }
        }

        /// <summary>Field number for the "set_option" field.</summary>
        public const int SetOptionFieldNumber = 5;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.ResponseSetOption SetOption
        {
            get { return valueCase_ == ValueOneofCase.SetOption ? (global::Types.ResponseSetOption) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.SetOption;
            }
        }

        /// <summary>Field number for the "init_chain" field.</summary>
        public const int InitChainFieldNumber = 6;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.ResponseInitChain InitChain
        {
            get { return valueCase_ == ValueOneofCase.InitChain ? (global::Types.ResponseInitChain) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.InitChain;
            }
        }

        /// <summary>Field number for the "query" field.</summary>
        public const int QueryFieldNumber = 7;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.ResponseQuery Query
        {
            get { return valueCase_ == ValueOneofCase.Query ? (global::Types.ResponseQuery) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Query;
            }
        }

        /// <summary>Field number for the "begin_block" field.</summary>
        public const int BeginBlockFieldNumber = 8;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.ResponseBeginBlock BeginBlock
        {
            get { return valueCase_ == ValueOneofCase.BeginBlock ? (global::Types.ResponseBeginBlock) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.BeginBlock;
            }
        }

        /// <summary>Field number for the "check_tx" field.</summary>
        public const int CheckTxFieldNumber = 9;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.ResponseCheckTx CheckTx
        {
            get { return valueCase_ == ValueOneofCase.CheckTx ? (global::Types.ResponseCheckTx) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.CheckTx;
            }
        }

        /// <summary>Field number for the "deliver_tx" field.</summary>
        public const int DeliverTxFieldNumber = 10;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.ResponseDeliverTx DeliverTx
        {
            get { return valueCase_ == ValueOneofCase.DeliverTx ? (global::Types.ResponseDeliverTx) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.DeliverTx;
            }
        }

        /// <summary>Field number for the "end_block" field.</summary>
        public const int EndBlockFieldNumber = 11;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.ResponseEndBlock EndBlock
        {
            get { return valueCase_ == ValueOneofCase.EndBlock ? (global::Types.ResponseEndBlock) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.EndBlock;
            }
        }

        /// <summary>Field number for the "commit" field.</summary>
        public const int CommitFieldNumber = 12;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.ResponseCommit Commit
        {
            get { return valueCase_ == ValueOneofCase.Commit ? (global::Types.ResponseCommit) value_ : null; }
            set
            {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Commit;
            }
        }

        private object value_;

        /// <summary>Enum of possible cases for the "value" oneof.</summary>
        public enum ValueOneofCase
        {
            None = 0,
            Exception = 1,
            Echo = 2,
            Flush = 3,
            Info = 4,
            SetOption = 5,
            InitChain = 6,
            Query = 7,
            BeginBlock = 8,
            CheckTx = 9,
            DeliverTx = 10,
            EndBlock = 11,
            Commit = 12,
        }

        private ValueOneofCase valueCase_ = ValueOneofCase.None;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueOneofCase ValueCase
        {
            get { return valueCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue()
        {
            valueCase_ = ValueOneofCase.None;
            value_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!Equals(Exception, other.Exception)) return false;
            if (!Equals(Echo, other.Echo)) return false;
            if (!Equals(Flush, other.Flush)) return false;
            if (!Equals(Info, other.Info)) return false;
            if (!Equals(SetOption, other.SetOption)) return false;
            if (!Equals(InitChain, other.InitChain)) return false;
            if (!Equals(Query, other.Query)) return false;
            if (!Equals(BeginBlock, other.BeginBlock)) return false;
            if (!Equals(CheckTx, other.CheckTx)) return false;
            if (!Equals(DeliverTx, other.DeliverTx)) return false;
            if (!Equals(EndBlock, other.EndBlock)) return false;
            if (!Equals(Commit, other.Commit)) return false;
            if (ValueCase != other.ValueCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (valueCase_ == ValueOneofCase.Exception) hash ^= Exception.GetHashCode();
            if (valueCase_ == ValueOneofCase.Echo) hash ^= Echo.GetHashCode();
            if (valueCase_ == ValueOneofCase.Flush) hash ^= Flush.GetHashCode();
            if (valueCase_ == ValueOneofCase.Info) hash ^= Info.GetHashCode();
            if (valueCase_ == ValueOneofCase.SetOption) hash ^= SetOption.GetHashCode();
            if (valueCase_ == ValueOneofCase.InitChain) hash ^= InitChain.GetHashCode();
            if (valueCase_ == ValueOneofCase.Query) hash ^= Query.GetHashCode();
            if (valueCase_ == ValueOneofCase.BeginBlock) hash ^= BeginBlock.GetHashCode();
            if (valueCase_ == ValueOneofCase.CheckTx) hash ^= CheckTx.GetHashCode();
            if (valueCase_ == ValueOneofCase.DeliverTx) hash ^= DeliverTx.GetHashCode();
            if (valueCase_ == ValueOneofCase.EndBlock) hash ^= EndBlock.GetHashCode();
            if (valueCase_ == ValueOneofCase.Commit) hash ^= Commit.GetHashCode();
            hash ^= (int) valueCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (valueCase_ == ValueOneofCase.Exception)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Exception);
            }

            if (valueCase_ == ValueOneofCase.Echo)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Echo);
            }

            if (valueCase_ == ValueOneofCase.Flush)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Flush);
            }

            if (valueCase_ == ValueOneofCase.Info)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Info);
            }

            if (valueCase_ == ValueOneofCase.SetOption)
            {
                output.WriteRawTag(42);
                output.WriteMessage(SetOption);
            }

            if (valueCase_ == ValueOneofCase.InitChain)
            {
                output.WriteRawTag(50);
                output.WriteMessage(InitChain);
            }

            if (valueCase_ == ValueOneofCase.Query)
            {
                output.WriteRawTag(58);
                output.WriteMessage(Query);
            }

            if (valueCase_ == ValueOneofCase.BeginBlock)
            {
                output.WriteRawTag(66);
                output.WriteMessage(BeginBlock);
            }

            if (valueCase_ == ValueOneofCase.CheckTx)
            {
                output.WriteRawTag(74);
                output.WriteMessage(CheckTx);
            }

            if (valueCase_ == ValueOneofCase.DeliverTx)
            {
                output.WriteRawTag(82);
                output.WriteMessage(DeliverTx);
            }

            if (valueCase_ == ValueOneofCase.EndBlock)
            {
                output.WriteRawTag(90);
                output.WriteMessage(EndBlock);
            }

            if (valueCase_ == ValueOneofCase.Commit)
            {
                output.WriteRawTag(98);
                output.WriteMessage(Commit);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (valueCase_ == ValueOneofCase.Exception)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exception);
            }

            if (valueCase_ == ValueOneofCase.Echo)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Echo);
            }

            if (valueCase_ == ValueOneofCase.Flush)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flush);
            }

            if (valueCase_ == ValueOneofCase.Info)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
            }

            if (valueCase_ == ValueOneofCase.SetOption)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetOption);
            }

            if (valueCase_ == ValueOneofCase.InitChain)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitChain);
            }

            if (valueCase_ == ValueOneofCase.Query)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
            }

            if (valueCase_ == ValueOneofCase.BeginBlock)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(BeginBlock);
            }

            if (valueCase_ == ValueOneofCase.CheckTx)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckTx);
            }

            if (valueCase_ == ValueOneofCase.DeliverTx)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeliverTx);
            }

            if (valueCase_ == ValueOneofCase.EndBlock)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndBlock);
            }

            if (valueCase_ == ValueOneofCase.Commit)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commit);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other)
        {
            if (other == null)
            {
                return;
            }

            switch (other.ValueCase)
            {
                case ValueOneofCase.Exception:
                    if (Exception == null)
                    {
                        Exception = new global::Types.ResponseException();
                    }

                    Exception.MergeFrom(other.Exception);
                    break;
                case ValueOneofCase.Echo:
                    if (Echo == null)
                    {
                        Echo = new global::Types.ResponseEcho();
                    }

                    Echo.MergeFrom(other.Echo);
                    break;
                case ValueOneofCase.Flush:
                    if (Flush == null)
                    {
                        Flush = new global::Types.ResponseFlush();
                    }

                    Flush.MergeFrom(other.Flush);
                    break;
                case ValueOneofCase.Info:
                    if (Info == null)
                    {
                        Info = new global::Types.ResponseInfo();
                    }

                    Info.MergeFrom(other.Info);
                    break;
                case ValueOneofCase.SetOption:
                    if (SetOption == null)
                    {
                        SetOption = new global::Types.ResponseSetOption();
                    }

                    SetOption.MergeFrom(other.SetOption);
                    break;
                case ValueOneofCase.InitChain:
                    if (InitChain == null)
                    {
                        InitChain = new global::Types.ResponseInitChain();
                    }

                    InitChain.MergeFrom(other.InitChain);
                    break;
                case ValueOneofCase.Query:
                    if (Query == null)
                    {
                        Query = new global::Types.ResponseQuery();
                    }

                    Query.MergeFrom(other.Query);
                    break;
                case ValueOneofCase.BeginBlock:
                    if (BeginBlock == null)
                    {
                        BeginBlock = new global::Types.ResponseBeginBlock();
                    }

                    BeginBlock.MergeFrom(other.BeginBlock);
                    break;
                case ValueOneofCase.CheckTx:
                    if (CheckTx == null)
                    {
                        CheckTx = new global::Types.ResponseCheckTx();
                    }

                    CheckTx.MergeFrom(other.CheckTx);
                    break;
                case ValueOneofCase.DeliverTx:
                    if (DeliverTx == null)
                    {
                        DeliverTx = new global::Types.ResponseDeliverTx();
                    }

                    DeliverTx.MergeFrom(other.DeliverTx);
                    break;
                case ValueOneofCase.EndBlock:
                    if (EndBlock == null)
                    {
                        EndBlock = new global::Types.ResponseEndBlock();
                    }

                    EndBlock.MergeFrom(other.EndBlock);
                    break;
                case ValueOneofCase.Commit:
                    if (Commit == null)
                    {
                        Commit = new global::Types.ResponseCommit();
                    }

                    Commit.MergeFrom(other.Commit);
                    break;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        global::Types.ResponseException subBuilder = new global::Types.ResponseException();
                        if (valueCase_ == ValueOneofCase.Exception)
                        {
                            subBuilder.MergeFrom(Exception);
                        }

                        input.ReadMessage(subBuilder);
                        Exception = subBuilder;
                        break;
                    }
                    case 18:
                    {
                        global::Types.ResponseEcho subBuilder = new global::Types.ResponseEcho();
                        if (valueCase_ == ValueOneofCase.Echo)
                        {
                            subBuilder.MergeFrom(Echo);
                        }

                        input.ReadMessage(subBuilder);
                        Echo = subBuilder;
                        break;
                    }
                    case 26:
                    {
                        global::Types.ResponseFlush subBuilder = new global::Types.ResponseFlush();
                        if (valueCase_ == ValueOneofCase.Flush)
                        {
                            subBuilder.MergeFrom(Flush);
                        }

                        input.ReadMessage(subBuilder);
                        Flush = subBuilder;
                        break;
                    }
                    case 34:
                    {
                        global::Types.ResponseInfo subBuilder = new global::Types.ResponseInfo();
                        if (valueCase_ == ValueOneofCase.Info)
                        {
                            subBuilder.MergeFrom(Info);
                        }

                        input.ReadMessage(subBuilder);
                        Info = subBuilder;
                        break;
                    }
                    case 42:
                    {
                        global::Types.ResponseSetOption subBuilder = new global::Types.ResponseSetOption();
                        if (valueCase_ == ValueOneofCase.SetOption)
                        {
                            subBuilder.MergeFrom(SetOption);
                        }

                        input.ReadMessage(subBuilder);
                        SetOption = subBuilder;
                        break;
                    }
                    case 50:
                    {
                        global::Types.ResponseInitChain subBuilder = new global::Types.ResponseInitChain();
                        if (valueCase_ == ValueOneofCase.InitChain)
                        {
                            subBuilder.MergeFrom(InitChain);
                        }

                        input.ReadMessage(subBuilder);
                        InitChain = subBuilder;
                        break;
                    }
                    case 58:
                    {
                        global::Types.ResponseQuery subBuilder = new global::Types.ResponseQuery();
                        if (valueCase_ == ValueOneofCase.Query)
                        {
                            subBuilder.MergeFrom(Query);
                        }

                        input.ReadMessage(subBuilder);
                        Query = subBuilder;
                        break;
                    }
                    case 66:
                    {
                        global::Types.ResponseBeginBlock subBuilder = new global::Types.ResponseBeginBlock();
                        if (valueCase_ == ValueOneofCase.BeginBlock)
                        {
                            subBuilder.MergeFrom(BeginBlock);
                        }

                        input.ReadMessage(subBuilder);
                        BeginBlock = subBuilder;
                        break;
                    }
                    case 74:
                    {
                        global::Types.ResponseCheckTx subBuilder = new global::Types.ResponseCheckTx();
                        if (valueCase_ == ValueOneofCase.CheckTx)
                        {
                            subBuilder.MergeFrom(CheckTx);
                        }

                        input.ReadMessage(subBuilder);
                        CheckTx = subBuilder;
                        break;
                    }
                    case 82:
                    {
                        global::Types.ResponseDeliverTx subBuilder = new global::Types.ResponseDeliverTx();
                        if (valueCase_ == ValueOneofCase.DeliverTx)
                        {
                            subBuilder.MergeFrom(DeliverTx);
                        }

                        input.ReadMessage(subBuilder);
                        DeliverTx = subBuilder;
                        break;
                    }
                    case 90:
                    {
                        global::Types.ResponseEndBlock subBuilder = new global::Types.ResponseEndBlock();
                        if (valueCase_ == ValueOneofCase.EndBlock)
                        {
                            subBuilder.MergeFrom(EndBlock);
                        }

                        input.ReadMessage(subBuilder);
                        EndBlock = subBuilder;
                        break;
                    }
                    case 98:
                    {
                        global::Types.ResponseCommit subBuilder = new global::Types.ResponseCommit();
                        if (valueCase_ == ValueOneofCase.Commit)
                        {
                            subBuilder.MergeFrom(Commit);
                        }

                        input.ReadMessage(subBuilder);
                        Commit = subBuilder;
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class ResponseException : pb::IMessage<ResponseException>
    {
        private static readonly pb::MessageParser<ResponseException> _parser = new pb::MessageParser<ResponseException>(() => new ResponseException());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseException> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseException()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseException(ResponseException other) : this()
        {
            error_ = other.error_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseException Clone()
        {
            return new ResponseException(this);
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 1;

        private string error_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Error
        {
            get { return error_; }
            set { error_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseException);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseException other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Error != other.Error) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Error.Length != 0) hash ^= Error.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Error.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Error);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Error.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseException other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Error.Length != 0)
            {
                Error = other.Error;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Error = input.ReadString();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class ResponseEcho : pb::IMessage<ResponseEcho>
    {
        private static readonly pb::MessageParser<ResponseEcho> _parser = new pb::MessageParser<ResponseEcho>(() => new ResponseEcho());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseEcho> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseEcho()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseEcho(ResponseEcho other) : this()
        {
            message_ = other.message_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseEcho Clone()
        {
            return new ResponseEcho(this);
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 1;

        private string message_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message
        {
            get { return message_; }
            set { message_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseEcho);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseEcho other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Message != other.Message) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Message.Length != 0) hash ^= Message.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Message.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Message);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Message.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseEcho other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Message.Length != 0)
            {
                Message = other.Message;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Message = input.ReadString();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class ResponseFlush : pb::IMessage<ResponseFlush>
    {
        private static readonly pb::MessageParser<ResponseFlush> _parser = new pb::MessageParser<ResponseFlush>(() => new ResponseFlush());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseFlush> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseFlush()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseFlush(ResponseFlush other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseFlush Clone()
        {
            return new ResponseFlush(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseFlush);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseFlush other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseFlush other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }
    }

    public sealed partial class ResponseInfo : pb::IMessage<ResponseInfo>
    {
        private static readonly pb::MessageParser<ResponseInfo> _parser = new pb::MessageParser<ResponseInfo>(() => new ResponseInfo());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseInfo> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseInfo(ResponseInfo other) : this()
        {
            data_ = other.data_;
            version_ = other.version_;
            lastBlockHeight_ = other.lastBlockHeight_;
            lastBlockAppHash_ = other.lastBlockAppHash_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseInfo Clone()
        {
            return new ResponseInfo(this);
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 1;

        private string data_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Data
        {
            get { return data_; }
            set { data_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 2;

        private string version_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version
        {
            get { return version_; }
            set { version_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "last_block_height" field.</summary>
        public const int LastBlockHeightFieldNumber = 3;

        private long lastBlockHeight_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LastBlockHeight
        {
            get { return lastBlockHeight_; }
            set { lastBlockHeight_ = value; }
        }

        /// <summary>Field number for the "last_block_app_hash" field.</summary>
        public const int LastBlockAppHashFieldNumber = 4;

        private pb::ByteString lastBlockAppHash_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString LastBlockAppHash
        {
            get { return lastBlockAppHash_; }
            set { lastBlockAppHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Data != other.Data) return false;
            if (Version != other.Version) return false;
            if (LastBlockHeight != other.LastBlockHeight) return false;
            if (LastBlockAppHash != other.LastBlockAppHash) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Data.Length != 0) hash ^= Data.GetHashCode();
            if (Version.Length != 0) hash ^= Version.GetHashCode();
            if (LastBlockHeight != 0L) hash ^= LastBlockHeight.GetHashCode();
            if (LastBlockAppHash.Length != 0) hash ^= LastBlockAppHash.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Data.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Data);
            }

            if (Version.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Version);
            }

            if (LastBlockHeight != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(LastBlockHeight);
            }

            if (LastBlockAppHash.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteBytes(LastBlockAppHash);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Data.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
            }

            if (Version.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
            }

            if (LastBlockHeight != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastBlockHeight);
            }

            if (LastBlockAppHash.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(LastBlockAppHash);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseInfo other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Data.Length != 0)
            {
                Data = other.Data;
            }

            if (other.Version.Length != 0)
            {
                Version = other.Version;
            }

            if (other.LastBlockHeight != 0L)
            {
                LastBlockHeight = other.LastBlockHeight;
            }

            if (other.LastBlockAppHash.Length != 0)
            {
                LastBlockAppHash = other.LastBlockAppHash;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Data = input.ReadString();
                        break;
                    }
                    case 18:
                    {
                        Version = input.ReadString();
                        break;
                    }
                    case 24:
                    {
                        LastBlockHeight = input.ReadInt64();
                        break;
                    }
                    case 34:
                    {
                        LastBlockAppHash = input.ReadBytes();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class ResponseSetOption : pb::IMessage<ResponseSetOption>
    {
        private static readonly pb::MessageParser<ResponseSetOption> _parser = new pb::MessageParser<ResponseSetOption>(() => new ResponseSetOption());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseSetOption> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseSetOption()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseSetOption(ResponseSetOption other) : this()
        {
            code_ = other.code_;
            log_ = other.log_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseSetOption Clone()
        {
            return new ResponseSetOption(this);
        }

        /// <summary>Field number for the "code" field.</summary>
        public const int CodeFieldNumber = 1;

        private uint code_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Code
        {
            get { return code_; }
            set { code_ = value; }
        }

        /// <summary>Field number for the "log" field.</summary>
        public const int LogFieldNumber = 2;

        private string log_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Log
        {
            get { return log_; }
            set { log_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseSetOption);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseSetOption other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Code != other.Code) return false;
            if (Log != other.Log) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Code != 0) hash ^= Code.GetHashCode();
            if (Log.Length != 0) hash ^= Log.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Code != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Code);
            }

            if (Log.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Log);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Code != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
            }

            if (Log.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseSetOption other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Code != 0)
            {
                Code = other.Code;
            }

            if (other.Log.Length != 0)
            {
                Log = other.Log;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Code = input.ReadUInt32();
                        break;
                    }
                    case 18:
                    {
                        Log = input.ReadString();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class ResponseInitChain : pb::IMessage<ResponseInitChain>
    {
        private static readonly pb::MessageParser<ResponseInitChain> _parser = new pb::MessageParser<ResponseInitChain>(() => new ResponseInitChain());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseInitChain> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[18]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseInitChain()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseInitChain(ResponseInitChain other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseInitChain Clone()
        {
            return new ResponseInitChain(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseInitChain);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseInitChain other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseInitChain other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }
    }

    public sealed partial class ResponseQuery : pb::IMessage<ResponseQuery>
    {
        private static readonly pb::MessageParser<ResponseQuery> _parser = new pb::MessageParser<ResponseQuery>(() => new ResponseQuery());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseQuery> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[19]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuery()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuery(ResponseQuery other) : this()
        {
            code_ = other.code_;
            index_ = other.index_;
            key_ = other.key_;
            value_ = other.value_;
            proof_ = other.proof_;
            height_ = other.height_;
            log_ = other.log_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuery Clone()
        {
            return new ResponseQuery(this);
        }

        /// <summary>Field number for the "code" field.</summary>
        public const int CodeFieldNumber = 1;

        private uint code_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Code
        {
            get { return code_; }
            set { code_ = value; }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 2;

        private long index_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Index
        {
            get { return index_; }
            set { index_ = value; }
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 3;

        private pb::ByteString key_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Key
        {
            get { return key_; }
            set { key_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 4;

        private pb::ByteString value_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Value
        {
            get { return value_; }
            set { value_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "proof" field.</summary>
        public const int ProofFieldNumber = 5;

        private pb::ByteString proof_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Proof
        {
            get { return proof_; }
            set { proof_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 6;

        private long height_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Height
        {
            get { return height_; }
            set { height_ = value; }
        }

        /// <summary>Field number for the "log" field.</summary>
        public const int LogFieldNumber = 7;

        private string log_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Log
        {
            get { return log_; }
            set { log_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseQuery);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseQuery other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Code != other.Code) return false;
            if (Index != other.Index) return false;
            if (Key != other.Key) return false;
            if (Value != other.Value) return false;
            if (Proof != other.Proof) return false;
            if (Height != other.Height) return false;
            if (Log != other.Log) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Code != 0) hash ^= Code.GetHashCode();
            if (Index != 0L) hash ^= Index.GetHashCode();
            if (Key.Length != 0) hash ^= Key.GetHashCode();
            if (Value.Length != 0) hash ^= Value.GetHashCode();
            if (Proof.Length != 0) hash ^= Proof.GetHashCode();
            if (Height != 0L) hash ^= Height.GetHashCode();
            if (Log.Length != 0) hash ^= Log.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Code != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Code);
            }

            if (Index != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(Index);
            }

            if (Key.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteBytes(Key);
            }

            if (Value.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteBytes(Value);
            }

            if (Proof.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteBytes(Proof);
            }

            if (Height != 0L)
            {
                output.WriteRawTag(48);
                output.WriteInt64(Height);
            }

            if (Log.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteString(Log);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Code != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
            }

            if (Index != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Index);
            }

            if (Key.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
            }

            if (Value.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
            }

            if (Proof.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Proof);
            }

            if (Height != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
            }

            if (Log.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseQuery other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Code != 0)
            {
                Code = other.Code;
            }

            if (other.Index != 0L)
            {
                Index = other.Index;
            }

            if (other.Key.Length != 0)
            {
                Key = other.Key;
            }

            if (other.Value.Length != 0)
            {
                Value = other.Value;
            }

            if (other.Proof.Length != 0)
            {
                Proof = other.Proof;
            }

            if (other.Height != 0L)
            {
                Height = other.Height;
            }

            if (other.Log.Length != 0)
            {
                Log = other.Log;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Code = input.ReadUInt32();
                        break;
                    }
                    case 16:
                    {
                        Index = input.ReadInt64();
                        break;
                    }
                    case 26:
                    {
                        Key = input.ReadBytes();
                        break;
                    }
                    case 34:
                    {
                        Value = input.ReadBytes();
                        break;
                    }
                    case 42:
                    {
                        Proof = input.ReadBytes();
                        break;
                    }
                    case 48:
                    {
                        Height = input.ReadInt64();
                        break;
                    }
                    case 58:
                    {
                        Log = input.ReadString();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class ResponseBeginBlock : pb::IMessage<ResponseBeginBlock>
    {
        private static readonly pb::MessageParser<ResponseBeginBlock> _parser = new pb::MessageParser<ResponseBeginBlock>(() => new ResponseBeginBlock());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseBeginBlock> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[20]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseBeginBlock()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseBeginBlock(ResponseBeginBlock other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseBeginBlock Clone()
        {
            return new ResponseBeginBlock(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseBeginBlock);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseBeginBlock other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseBeginBlock other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }
    }

    public sealed partial class ResponseCheckTx : pb::IMessage<ResponseCheckTx>
    {
        private static readonly pb::MessageParser<ResponseCheckTx> _parser = new pb::MessageParser<ResponseCheckTx>(() => new ResponseCheckTx());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseCheckTx> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[21]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseCheckTx()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseCheckTx(ResponseCheckTx other) : this()
        {
            code_ = other.code_;
            data_ = other.data_;
            log_ = other.log_;
            gas_ = other.gas_;
            fee_ = other.fee_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseCheckTx Clone()
        {
            return new ResponseCheckTx(this);
        }

        /// <summary>Field number for the "code" field.</summary>
        public const int CodeFieldNumber = 1;

        private uint code_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Code
        {
            get { return code_; }
            set { code_ = value; }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 2;

        private pb::ByteString data_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data
        {
            get { return data_; }
            set { data_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "log" field.</summary>
        public const int LogFieldNumber = 3;

        private string log_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Log
        {
            get { return log_; }
            set { log_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "gas" field.</summary>
        public const int GasFieldNumber = 4;

        private long gas_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Gas
        {
            get { return gas_; }
            set { gas_ = value; }
        }

        /// <summary>Field number for the "fee" field.</summary>
        public const int FeeFieldNumber = 5;

        private long fee_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Fee
        {
            get { return fee_; }
            set { fee_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseCheckTx);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseCheckTx other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Code != other.Code) return false;
            if (Data != other.Data) return false;
            if (Log != other.Log) return false;
            if (Gas != other.Gas) return false;
            if (Fee != other.Fee) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Code != 0) hash ^= Code.GetHashCode();
            if (Data.Length != 0) hash ^= Data.GetHashCode();
            if (Log.Length != 0) hash ^= Log.GetHashCode();
            if (Gas != 0L) hash ^= Gas.GetHashCode();
            if (Fee != 0L) hash ^= Fee.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Code != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Code);
            }

            if (Data.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(Data);
            }

            if (Log.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Log);
            }

            if (Gas != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(Gas);
            }

            if (Fee != 0L)
            {
                output.WriteRawTag(40);
                output.WriteInt64(Fee);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Code != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
            }

            if (Data.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
            }

            if (Log.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
            }

            if (Gas != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gas);
            }

            if (Fee != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseCheckTx other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Code != 0)
            {
                Code = other.Code;
            }

            if (other.Data.Length != 0)
            {
                Data = other.Data;
            }

            if (other.Log.Length != 0)
            {
                Log = other.Log;
            }

            if (other.Gas != 0L)
            {
                Gas = other.Gas;
            }

            if (other.Fee != 0L)
            {
                Fee = other.Fee;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Code = input.ReadUInt32();
                        break;
                    }
                    case 18:
                    {
                        Data = input.ReadBytes();
                        break;
                    }
                    case 26:
                    {
                        Log = input.ReadString();
                        break;
                    }
                    case 32:
                    {
                        Gas = input.ReadInt64();
                        break;
                    }
                    case 40:
                    {
                        Fee = input.ReadInt64();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class ResponseDeliverTx : pb::IMessage<ResponseDeliverTx>
    {
        private static readonly pb::MessageParser<ResponseDeliverTx> _parser = new pb::MessageParser<ResponseDeliverTx>(() => new ResponseDeliverTx());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseDeliverTx> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[22]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseDeliverTx()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseDeliverTx(ResponseDeliverTx other) : this()
        {
            code_ = other.code_;
            data_ = other.data_;
            log_ = other.log_;
            tags_ = other.tags_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseDeliverTx Clone()
        {
            return new ResponseDeliverTx(this);
        }

        /// <summary>Field number for the "code" field.</summary>
        public const int CodeFieldNumber = 1;

        private uint code_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Code
        {
            get { return code_; }
            set { code_ = value; }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 2;

        private pb::ByteString data_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data
        {
            get { return data_; }
            set { data_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "log" field.</summary>
        public const int LogFieldNumber = 3;

        private string log_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Log
        {
            get { return log_; }
            set { log_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "tags" field.</summary>
        public const int TagsFieldNumber = 4;

        private static readonly pb::FieldCodec<global::Types.KVPair> _repeated_tags_codec
            = pb::FieldCodec.ForMessage(34, global::Types.KVPair.Parser);

        private readonly pbc::RepeatedField<global::Types.KVPair> tags_ = new pbc::RepeatedField<global::Types.KVPair>();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Types.KVPair> Tags
        {
            get { return tags_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseDeliverTx);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseDeliverTx other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Code != other.Code) return false;
            if (Data != other.Data) return false;
            if (Log != other.Log) return false;
            if (!tags_.Equals(other.tags_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Code != 0) hash ^= Code.GetHashCode();
            if (Data.Length != 0) hash ^= Data.GetHashCode();
            if (Log.Length != 0) hash ^= Log.GetHashCode();
            hash ^= tags_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Code != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Code);
            }

            if (Data.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(Data);
            }

            if (Log.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Log);
            }

            tags_.WriteTo(output, _repeated_tags_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Code != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
            }

            if (Data.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
            }

            if (Log.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
            }

            size += tags_.CalculateSize(_repeated_tags_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseDeliverTx other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Code != 0)
            {
                Code = other.Code;
            }

            if (other.Data.Length != 0)
            {
                Data = other.Data;
            }

            if (other.Log.Length != 0)
            {
                Log = other.Log;
            }

            tags_.Add(other.tags_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Code = input.ReadUInt32();
                        break;
                    }
                    case 18:
                    {
                        Data = input.ReadBytes();
                        break;
                    }
                    case 26:
                    {
                        Log = input.ReadString();
                        break;
                    }
                    case 34:
                    {
                        tags_.AddEntriesFrom(input, _repeated_tags_codec);
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class ResponseEndBlock : pb::IMessage<ResponseEndBlock>
    {
        private static readonly pb::MessageParser<ResponseEndBlock> _parser = new pb::MessageParser<ResponseEndBlock>(() => new ResponseEndBlock());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseEndBlock> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[23]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseEndBlock()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseEndBlock(ResponseEndBlock other) : this()
        {
            validatorUpdates_ = other.validatorUpdates_.Clone();
            ConsensusParamUpdates = other.consensusParamUpdates_ != null ? other.ConsensusParamUpdates.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseEndBlock Clone()
        {
            return new ResponseEndBlock(this);
        }

        /// <summary>Field number for the "validator_updates" field.</summary>
        public const int ValidatorUpdatesFieldNumber = 1;

        private static readonly pb::FieldCodec<global::Types.Validator> _repeated_validatorUpdates_codec
            = pb::FieldCodec.ForMessage(10, global::Types.Validator.Parser);

        private readonly pbc::RepeatedField<global::Types.Validator> validatorUpdates_ = new pbc::RepeatedField<global::Types.Validator>();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Types.Validator> ValidatorUpdates
        {
            get { return validatorUpdates_; }
        }

        /// <summary>Field number for the "consensus_param_updates" field.</summary>
        public const int ConsensusParamUpdatesFieldNumber = 2;

        private global::Types.ConsensusParams consensusParamUpdates_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.ConsensusParams ConsensusParamUpdates
        {
            get { return consensusParamUpdates_; }
            set { consensusParamUpdates_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseEndBlock);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseEndBlock other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!validatorUpdates_.Equals(other.validatorUpdates_)) return false;
            if (!Equals(ConsensusParamUpdates, other.ConsensusParamUpdates)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= validatorUpdates_.GetHashCode();
            if (consensusParamUpdates_ != null) hash ^= ConsensusParamUpdates.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            validatorUpdates_.WriteTo(output, _repeated_validatorUpdates_codec);
            if (consensusParamUpdates_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ConsensusParamUpdates);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += validatorUpdates_.CalculateSize(_repeated_validatorUpdates_codec);
            if (consensusParamUpdates_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConsensusParamUpdates);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseEndBlock other)
        {
            if (other == null)
            {
                return;
            }

            validatorUpdates_.Add(other.validatorUpdates_);
            if (other.consensusParamUpdates_ != null)
            {
                if (consensusParamUpdates_ == null)
                {
                    consensusParamUpdates_ = new global::Types.ConsensusParams();
                }

                ConsensusParamUpdates.MergeFrom(other.ConsensusParamUpdates);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        validatorUpdates_.AddEntriesFrom(input, _repeated_validatorUpdates_codec);
                        break;
                    }
                    case 18:
                    {
                        if (consensusParamUpdates_ == null)
                        {
                            consensusParamUpdates_ = new global::Types.ConsensusParams();
                        }

                        input.ReadMessage(consensusParamUpdates_);
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class ResponseCommit : pb::IMessage<ResponseCommit>
    {
        private static readonly pb::MessageParser<ResponseCommit> _parser = new pb::MessageParser<ResponseCommit>(() => new ResponseCommit());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseCommit> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[24]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseCommit()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseCommit(ResponseCommit other) : this()
        {
            code_ = other.code_;
            data_ = other.data_;
            log_ = other.log_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseCommit Clone()
        {
            return new ResponseCommit(this);
        }

        /// <summary>Field number for the "code" field.</summary>
        public const int CodeFieldNumber = 1;

        private uint code_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Code
        {
            get { return code_; }
            set { code_ = value; }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 2;

        private pb::ByteString data_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data
        {
            get { return data_; }
            set { data_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "log" field.</summary>
        public const int LogFieldNumber = 3;

        private string log_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Log
        {
            get { return log_; }
            set { log_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseCommit);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseCommit other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Code != other.Code) return false;
            if (Data != other.Data) return false;
            if (Log != other.Log) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Code != 0) hash ^= Code.GetHashCode();
            if (Data.Length != 0) hash ^= Data.GetHashCode();
            if (Log.Length != 0) hash ^= Log.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Code != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Code);
            }

            if (Data.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(Data);
            }

            if (Log.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Log);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Code != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
            }

            if (Data.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
            }

            if (Log.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseCommit other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Code != 0)
            {
                Code = other.Code;
            }

            if (other.Data.Length != 0)
            {
                Data = other.Data;
            }

            if (other.Log.Length != 0)
            {
                Log = other.Log;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Code = input.ReadUInt32();
                        break;
                    }
                    case 18:
                    {
                        Data = input.ReadBytes();
                        break;
                    }
                    case 26:
                    {
                        Log = input.ReadString();
                        break;
                    }
                }
            }
        }
    }

    /// <summary>
    /// ConsensusParams contains all consensus-relevant parameters
    /// that can be adjusted by the abci app
    /// </summary>
    public sealed partial class ConsensusParams : pb::IMessage<ConsensusParams>
    {
        private static readonly pb::MessageParser<ConsensusParams> _parser = new pb::MessageParser<ConsensusParams>(() => new ConsensusParams());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConsensusParams> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[25]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConsensusParams()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConsensusParams(ConsensusParams other) : this()
        {
            BlockSize = other.blockSize_ != null ? other.BlockSize.Clone() : null;
            TxSize = other.txSize_ != null ? other.TxSize.Clone() : null;
            BlockGossip = other.blockGossip_ != null ? other.BlockGossip.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConsensusParams Clone()
        {
            return new ConsensusParams(this);
        }

        /// <summary>Field number for the "block_size" field.</summary>
        public const int BlockSizeFieldNumber = 1;

        private global::Types.BlockSize blockSize_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.BlockSize BlockSize
        {
            get { return blockSize_; }
            set { blockSize_ = value; }
        }

        /// <summary>Field number for the "tx_size" field.</summary>
        public const int TxSizeFieldNumber = 2;

        private global::Types.TxSize txSize_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.TxSize TxSize
        {
            get { return txSize_; }
            set { txSize_ = value; }
        }

        /// <summary>Field number for the "block_gossip" field.</summary>
        public const int BlockGossipFieldNumber = 3;

        private global::Types.BlockGossip blockGossip_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.BlockGossip BlockGossip
        {
            get { return blockGossip_; }
            set { blockGossip_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ConsensusParams);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConsensusParams other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!Equals(BlockSize, other.BlockSize)) return false;
            if (!Equals(TxSize, other.TxSize)) return false;
            if (!Equals(BlockGossip, other.BlockGossip)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (blockSize_ != null) hash ^= BlockSize.GetHashCode();
            if (txSize_ != null) hash ^= TxSize.GetHashCode();
            if (blockGossip_ != null) hash ^= BlockGossip.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (blockSize_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(BlockSize);
            }

            if (txSize_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(TxSize);
            }

            if (blockGossip_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(BlockGossip);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (blockSize_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockSize);
            }

            if (txSize_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TxSize);
            }

            if (blockGossip_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockGossip);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConsensusParams other)
        {
            if (other == null)
            {
                return;
            }

            if (other.blockSize_ != null)
            {
                if (blockSize_ == null)
                {
                    blockSize_ = new global::Types.BlockSize();
                }

                BlockSize.MergeFrom(other.BlockSize);
            }

            if (other.txSize_ != null)
            {
                if (txSize_ == null)
                {
                    txSize_ = new global::Types.TxSize();
                }

                TxSize.MergeFrom(other.TxSize);
            }

            if (other.blockGossip_ != null)
            {
                if (blockGossip_ == null)
                {
                    blockGossip_ = new global::Types.BlockGossip();
                }

                BlockGossip.MergeFrom(other.BlockGossip);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        if (blockSize_ == null)
                        {
                            blockSize_ = new global::Types.BlockSize();
                        }

                        input.ReadMessage(blockSize_);
                        break;
                    }
                    case 18:
                    {
                        if (txSize_ == null)
                        {
                            txSize_ = new global::Types.TxSize();
                        }

                        input.ReadMessage(txSize_);
                        break;
                    }
                    case 26:
                    {
                        if (blockGossip_ == null)
                        {
                            blockGossip_ = new global::Types.BlockGossip();
                        }

                        input.ReadMessage(blockGossip_);
                        break;
                    }
                }
            }
        }
    }

    /// <summary>
    /// BlockSize contain limits on the block size.
    /// </summary>
    public sealed partial class BlockSize : pb::IMessage<BlockSize>
    {
        private static readonly pb::MessageParser<BlockSize> _parser = new pb::MessageParser<BlockSize>(() => new BlockSize());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BlockSize> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[26]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockSize()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockSize(BlockSize other) : this()
        {
            maxBytes_ = other.maxBytes_;
            maxTxs_ = other.maxTxs_;
            maxGas_ = other.maxGas_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockSize Clone()
        {
            return new BlockSize(this);
        }

        /// <summary>Field number for the "max_bytes" field.</summary>
        public const int MaxBytesFieldNumber = 1;

        private int maxBytes_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxBytes
        {
            get { return maxBytes_; }
            set { maxBytes_ = value; }
        }

        /// <summary>Field number for the "max_txs" field.</summary>
        public const int MaxTxsFieldNumber = 2;

        private int maxTxs_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxTxs
        {
            get { return maxTxs_; }
            set { maxTxs_ = value; }
        }

        /// <summary>Field number for the "max_gas" field.</summary>
        public const int MaxGasFieldNumber = 3;

        private long maxGas_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MaxGas
        {
            get { return maxGas_; }
            set { maxGas_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BlockSize);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BlockSize other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (MaxBytes != other.MaxBytes) return false;
            if (MaxTxs != other.MaxTxs) return false;
            if (MaxGas != other.MaxGas) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MaxBytes != 0) hash ^= MaxBytes.GetHashCode();
            if (MaxTxs != 0) hash ^= MaxTxs.GetHashCode();
            if (MaxGas != 0L) hash ^= MaxGas.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MaxBytes != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(MaxBytes);
            }

            if (MaxTxs != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(MaxTxs);
            }

            if (MaxGas != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(MaxGas);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MaxBytes != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBytes);
            }

            if (MaxTxs != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTxs);
            }

            if (MaxGas != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxGas);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BlockSize other)
        {
            if (other == null)
            {
                return;
            }

            if (other.MaxBytes != 0)
            {
                MaxBytes = other.MaxBytes;
            }

            if (other.MaxTxs != 0)
            {
                MaxTxs = other.MaxTxs;
            }

            if (other.MaxGas != 0L)
            {
                MaxGas = other.MaxGas;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        MaxBytes = input.ReadInt32();
                        break;
                    }
                    case 16:
                    {
                        MaxTxs = input.ReadInt32();
                        break;
                    }
                    case 24:
                    {
                        MaxGas = input.ReadInt64();
                        break;
                    }
                }
            }
        }
    }

    /// <summary>
    /// TxSize contain limits on the tx size.
    /// </summary>
    public sealed partial class TxSize : pb::IMessage<TxSize>
    {
        private static readonly pb::MessageParser<TxSize> _parser = new pb::MessageParser<TxSize>(() => new TxSize());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TxSize> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[27]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TxSize()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TxSize(TxSize other) : this()
        {
            maxBytes_ = other.maxBytes_;
            maxGas_ = other.maxGas_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TxSize Clone()
        {
            return new TxSize(this);
        }

        /// <summary>Field number for the "max_bytes" field.</summary>
        public const int MaxBytesFieldNumber = 1;

        private int maxBytes_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxBytes
        {
            get { return maxBytes_; }
            set { maxBytes_ = value; }
        }

        /// <summary>Field number for the "max_gas" field.</summary>
        public const int MaxGasFieldNumber = 2;

        private long maxGas_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MaxGas
        {
            get { return maxGas_; }
            set { maxGas_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TxSize);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TxSize other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (MaxBytes != other.MaxBytes) return false;
            if (MaxGas != other.MaxGas) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MaxBytes != 0) hash ^= MaxBytes.GetHashCode();
            if (MaxGas != 0L) hash ^= MaxGas.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MaxBytes != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(MaxBytes);
            }

            if (MaxGas != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(MaxGas);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MaxBytes != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBytes);
            }

            if (MaxGas != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxGas);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TxSize other)
        {
            if (other == null)
            {
                return;
            }

            if (other.MaxBytes != 0)
            {
                MaxBytes = other.MaxBytes;
            }

            if (other.MaxGas != 0L)
            {
                MaxGas = other.MaxGas;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        MaxBytes = input.ReadInt32();
                        break;
                    }
                    case 16:
                    {
                        MaxGas = input.ReadInt64();
                        break;
                    }
                }
            }
        }
    }

    /// <summary>
    /// BlockGossip determine consensus critical
    /// elements of how blocks are gossiped
    /// </summary>
    public sealed partial class BlockGossip : pb::IMessage<BlockGossip>
    {
        private static readonly pb::MessageParser<BlockGossip> _parser = new pb::MessageParser<BlockGossip>(() => new BlockGossip());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BlockGossip> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[28]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockGossip()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockGossip(BlockGossip other) : this()
        {
            blockPartSizeBytes_ = other.blockPartSizeBytes_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockGossip Clone()
        {
            return new BlockGossip(this);
        }

        /// <summary>Field number for the "block_part_size_bytes" field.</summary>
        public const int BlockPartSizeBytesFieldNumber = 1;

        private int blockPartSizeBytes_;

        /// <summary>
        /// Note: must not be 0
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BlockPartSizeBytes
        {
            get { return blockPartSizeBytes_; }
            set { blockPartSizeBytes_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BlockGossip);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BlockGossip other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (BlockPartSizeBytes != other.BlockPartSizeBytes) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (BlockPartSizeBytes != 0) hash ^= BlockPartSizeBytes.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (BlockPartSizeBytes != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(BlockPartSizeBytes);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (BlockPartSizeBytes != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockPartSizeBytes);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BlockGossip other)
        {
            if (other == null)
            {
                return;
            }

            if (other.BlockPartSizeBytes != 0)
            {
                BlockPartSizeBytes = other.BlockPartSizeBytes;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        BlockPartSizeBytes = input.ReadInt32();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class Header : pb::IMessage<Header>
    {
        private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Header> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[29]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Header()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Header(Header other) : this()
        {
            chainId_ = other.chainId_;
            height_ = other.height_;
            time_ = other.time_;
            numTxs_ = other.numTxs_;
            LastBlockId = other.lastBlockId_ != null ? other.LastBlockId.Clone() : null;
            lastCommitHash_ = other.lastCommitHash_;
            dataHash_ = other.dataHash_;
            validatorsHash_ = other.validatorsHash_;
            appHash_ = other.appHash_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Header Clone()
        {
            return new Header(this);
        }

        /// <summary>Field number for the "chain_id" field.</summary>
        public const int ChainIdFieldNumber = 1;

        private string chainId_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChainId
        {
            get { return chainId_; }
            set { chainId_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 2;

        private long height_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Height
        {
            get { return height_; }
            set { height_ = value; }
        }

        /// <summary>Field number for the "time" field.</summary>
        public const int TimeFieldNumber = 3;

        private long time_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Time
        {
            get { return time_; }
            set { time_ = value; }
        }

        /// <summary>Field number for the "num_txs" field.</summary>
        public const int NumTxsFieldNumber = 4;

        private int numTxs_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NumTxs
        {
            get { return numTxs_; }
            set { numTxs_ = value; }
        }

        /// <summary>Field number for the "last_block_id" field.</summary>
        public const int LastBlockIdFieldNumber = 5;

        private global::Types.BlockID lastBlockId_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.BlockID LastBlockId
        {
            get { return lastBlockId_; }
            set { lastBlockId_ = value; }
        }

        /// <summary>Field number for the "last_commit_hash" field.</summary>
        public const int LastCommitHashFieldNumber = 6;

        private pb::ByteString lastCommitHash_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString LastCommitHash
        {
            get { return lastCommitHash_; }
            set { lastCommitHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "data_hash" field.</summary>
        public const int DataHashFieldNumber = 7;

        private pb::ByteString dataHash_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString DataHash
        {
            get { return dataHash_; }
            set { dataHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "validators_hash" field.</summary>
        public const int ValidatorsHashFieldNumber = 8;

        private pb::ByteString validatorsHash_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ValidatorsHash
        {
            get { return validatorsHash_; }
            set { validatorsHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "app_hash" field.</summary>
        public const int AppHashFieldNumber = 9;

        private pb::ByteString appHash_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString AppHash
        {
            get { return appHash_; }
            set { appHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Header);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Header other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (ChainId != other.ChainId) return false;
            if (Height != other.Height) return false;
            if (Time != other.Time) return false;
            if (NumTxs != other.NumTxs) return false;
            if (!Equals(LastBlockId, other.LastBlockId)) return false;
            if (LastCommitHash != other.LastCommitHash) return false;
            if (DataHash != other.DataHash) return false;
            if (ValidatorsHash != other.ValidatorsHash) return false;
            if (AppHash != other.AppHash) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ChainId.Length != 0) hash ^= ChainId.GetHashCode();
            if (Height != 0L) hash ^= Height.GetHashCode();
            if (Time != 0L) hash ^= Time.GetHashCode();
            if (NumTxs != 0) hash ^= NumTxs.GetHashCode();
            if (lastBlockId_ != null) hash ^= LastBlockId.GetHashCode();
            if (LastCommitHash.Length != 0) hash ^= LastCommitHash.GetHashCode();
            if (DataHash.Length != 0) hash ^= DataHash.GetHashCode();
            if (ValidatorsHash.Length != 0) hash ^= ValidatorsHash.GetHashCode();
            if (AppHash.Length != 0) hash ^= AppHash.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ChainId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ChainId);
            }

            if (Height != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(Height);
            }

            if (Time != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(Time);
            }

            if (NumTxs != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(NumTxs);
            }

            if (lastBlockId_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(LastBlockId);
            }

            if (LastCommitHash.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteBytes(LastCommitHash);
            }

            if (DataHash.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteBytes(DataHash);
            }

            if (ValidatorsHash.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteBytes(ValidatorsHash);
            }

            if (AppHash.Length != 0)
            {
                output.WriteRawTag(74);
                output.WriteBytes(AppHash);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ChainId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ChainId);
            }

            if (Height != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
            }

            if (Time != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
            }

            if (NumTxs != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumTxs);
            }

            if (lastBlockId_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastBlockId);
            }

            if (LastCommitHash.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(LastCommitHash);
            }

            if (DataHash.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataHash);
            }

            if (ValidatorsHash.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(ValidatorsHash);
            }

            if (AppHash.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(AppHash);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Header other)
        {
            if (other == null)
            {
                return;
            }

            if (other.ChainId.Length != 0)
            {
                ChainId = other.ChainId;
            }

            if (other.Height != 0L)
            {
                Height = other.Height;
            }

            if (other.Time != 0L)
            {
                Time = other.Time;
            }

            if (other.NumTxs != 0)
            {
                NumTxs = other.NumTxs;
            }

            if (other.lastBlockId_ != null)
            {
                if (lastBlockId_ == null)
                {
                    lastBlockId_ = new global::Types.BlockID();
                }

                LastBlockId.MergeFrom(other.LastBlockId);
            }

            if (other.LastCommitHash.Length != 0)
            {
                LastCommitHash = other.LastCommitHash;
            }

            if (other.DataHash.Length != 0)
            {
                DataHash = other.DataHash;
            }

            if (other.ValidatorsHash.Length != 0)
            {
                ValidatorsHash = other.ValidatorsHash;
            }

            if (other.AppHash.Length != 0)
            {
                AppHash = other.AppHash;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        ChainId = input.ReadString();
                        break;
                    }
                    case 16:
                    {
                        Height = input.ReadInt64();
                        break;
                    }
                    case 24:
                    {
                        Time = input.ReadInt64();
                        break;
                    }
                    case 32:
                    {
                        NumTxs = input.ReadInt32();
                        break;
                    }
                    case 42:
                    {
                        if (lastBlockId_ == null)
                        {
                            lastBlockId_ = new global::Types.BlockID();
                        }

                        input.ReadMessage(lastBlockId_);
                        break;
                    }
                    case 50:
                    {
                        LastCommitHash = input.ReadBytes();
                        break;
                    }
                    case 58:
                    {
                        DataHash = input.ReadBytes();
                        break;
                    }
                    case 66:
                    {
                        ValidatorsHash = input.ReadBytes();
                        break;
                    }
                    case 74:
                    {
                        AppHash = input.ReadBytes();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class BlockID : pb::IMessage<BlockID>
    {
        private static readonly pb::MessageParser<BlockID> _parser = new pb::MessageParser<BlockID>(() => new BlockID());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BlockID> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[30]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockID()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockID(BlockID other) : this()
        {
            hash_ = other.hash_;
            Parts = other.parts_ != null ? other.Parts.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockID Clone()
        {
            return new BlockID(this);
        }

        /// <summary>Field number for the "hash" field.</summary>
        public const int HashFieldNumber = 1;

        private pb::ByteString hash_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Hash
        {
            get { return hash_; }
            set { hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "parts" field.</summary>
        public const int PartsFieldNumber = 2;

        private global::Types.PartSetHeader parts_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.PartSetHeader Parts
        {
            get { return parts_; }
            set { parts_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BlockID);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BlockID other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Hash != other.Hash) return false;
            if (!Equals(Parts, other.Parts)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Hash.Length != 0) hash ^= Hash.GetHashCode();
            if (parts_ != null) hash ^= Parts.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Hash.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(Hash);
            }

            if (parts_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Parts);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Hash.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
            }

            if (parts_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parts);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BlockID other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Hash.Length != 0)
            {
                Hash = other.Hash;
            }

            if (other.parts_ != null)
            {
                if (parts_ == null)
                {
                    parts_ = new global::Types.PartSetHeader();
                }

                Parts.MergeFrom(other.Parts);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Hash = input.ReadBytes();
                        break;
                    }
                    case 18:
                    {
                        if (parts_ == null)
                        {
                            parts_ = new global::Types.PartSetHeader();
                        }

                        input.ReadMessage(parts_);
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class PartSetHeader : pb::IMessage<PartSetHeader>
    {
        private static readonly pb::MessageParser<PartSetHeader> _parser = new pb::MessageParser<PartSetHeader>(() => new PartSetHeader());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PartSetHeader> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[31]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PartSetHeader()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PartSetHeader(PartSetHeader other) : this()
        {
            total_ = other.total_;
            hash_ = other.hash_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PartSetHeader Clone()
        {
            return new PartSetHeader(this);
        }

        /// <summary>Field number for the "total" field.</summary>
        public const int TotalFieldNumber = 1;

        private int total_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Total
        {
            get { return total_; }
            set { total_ = value; }
        }

        /// <summary>Field number for the "hash" field.</summary>
        public const int HashFieldNumber = 2;

        private pb::ByteString hash_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Hash
        {
            get { return hash_; }
            set { hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PartSetHeader);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PartSetHeader other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Total != other.Total) return false;
            if (Hash != other.Hash) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Total != 0) hash ^= Total.GetHashCode();
            if (Hash.Length != 0) hash ^= Hash.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Total != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(Total);
            }

            if (Hash.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(Hash);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Total != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
            }

            if (Hash.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PartSetHeader other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Total != 0)
            {
                Total = other.Total;
            }

            if (other.Hash.Length != 0)
            {
                Hash = other.Hash;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Total = input.ReadInt32();
                        break;
                    }
                    case 18:
                    {
                        Hash = input.ReadBytes();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class Validator : pb::IMessage<Validator>
    {
        private static readonly pb::MessageParser<Validator> _parser = new pb::MessageParser<Validator>(() => new Validator());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Validator> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[32]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Validator()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Validator(Validator other) : this()
        {
            pubKey_ = other.pubKey_;
            power_ = other.power_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Validator Clone()
        {
            return new Validator(this);
        }

        /// <summary>Field number for the "pub_key" field.</summary>
        public const int PubKeyFieldNumber = 1;

        private pb::ByteString pubKey_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PubKey
        {
            get { return pubKey_; }
            set { pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "power" field.</summary>
        public const int PowerFieldNumber = 2;

        private long power_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Power
        {
            get { return power_; }
            set { power_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Validator);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Validator other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (PubKey != other.PubKey) return false;
            if (Power != other.Power) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
            if (Power != 0L) hash ^= Power.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (PubKey.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(PubKey);
            }

            if (Power != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(Power);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (PubKey.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(PubKey);
            }

            if (Power != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Power);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Validator other)
        {
            if (other == null)
            {
                return;
            }

            if (other.PubKey.Length != 0)
            {
                PubKey = other.PubKey;
            }

            if (other.Power != 0L)
            {
                Power = other.Power;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        PubKey = input.ReadBytes();
                        break;
                    }
                    case 16:
                    {
                        Power = input.ReadInt64();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class Evidence : pb::IMessage<Evidence>
    {
        private static readonly pb::MessageParser<Evidence> _parser = new pb::MessageParser<Evidence>(() => new Evidence());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Evidence> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[33]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Evidence()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Evidence(Evidence other) : this()
        {
            pubKey_ = other.pubKey_;
            height_ = other.height_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Evidence Clone()
        {
            return new Evidence(this);
        }

        /// <summary>Field number for the "pub_key" field.</summary>
        public const int PubKeyFieldNumber = 1;

        private pb::ByteString pubKey_ = pb::ByteString.Empty;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PubKey
        {
            get { return pubKey_; }
            set { pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 2;

        private long height_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Height
        {
            get { return height_; }
            set { height_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Evidence);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Evidence other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (PubKey != other.PubKey) return false;
            if (Height != other.Height) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
            if (Height != 0L) hash ^= Height.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (PubKey.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(PubKey);
            }

            if (Height != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(Height);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (PubKey.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(PubKey);
            }

            if (Height != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Evidence other)
        {
            if (other == null)
            {
                return;
            }

            if (other.PubKey.Length != 0)
            {
                PubKey = other.PubKey;
            }

            if (other.Height != 0L)
            {
                Height = other.Height;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        PubKey = input.ReadBytes();
                        break;
                    }
                    case 16:
                    {
                        Height = input.ReadInt64();
                        break;
                    }
                }
            }
        }
    }

    public sealed partial class KVPair : pb::IMessage<KVPair>
    {
        private static readonly pb::MessageParser<KVPair> _parser = new pb::MessageParser<KVPair>(() => new KVPair());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KVPair> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Types.TypesReflection.Descriptor.MessageTypes[34]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KVPair()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KVPair(KVPair other) : this()
        {
            key_ = other.key_;
            valueType_ = other.valueType_;
            valueString_ = other.valueString_;
            valueInt_ = other.valueInt_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KVPair Clone()
        {
            return new KVPair(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;

        private string key_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key
        {
            get { return key_; }
            set { key_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "value_type" field.</summary>
        public const int ValueTypeFieldNumber = 2;

        private global::Types.KVPair.Types.Type valueType_ = 0;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Types.KVPair.Types.Type ValueType
        {
            get { return valueType_; }
            set { valueType_ = value; }
        }

        /// <summary>Field number for the "value_string" field.</summary>
        public const int ValueStringFieldNumber = 3;

        private string valueString_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ValueString
        {
            get { return valueString_; }
            set { valueString_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>Field number for the "value_int" field.</summary>
        public const int ValueIntFieldNumber = 4;

        private long valueInt_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ValueInt
        {
            get { return valueInt_; }
            set { valueInt_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as KVPair);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KVPair other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Key != other.Key) return false;
            if (ValueType != other.ValueType) return false;
            if (ValueString != other.ValueString) return false;
            if (ValueInt != other.ValueInt) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Key.Length != 0) hash ^= Key.GetHashCode();
            if (ValueType != 0) hash ^= ValueType.GetHashCode();
            if (ValueString.Length != 0) hash ^= ValueString.GetHashCode();
            if (ValueInt != 0L) hash ^= ValueInt.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Key.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Key);
            }

            if (ValueType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int) ValueType);
            }

            if (ValueString.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(ValueString);
            }

            if (ValueInt != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(ValueInt);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Key.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
            }

            if (ValueType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ValueType);
            }

            if (ValueString.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ValueString);
            }

            if (ValueInt != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(ValueInt);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KVPair other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Key.Length != 0)
            {
                Key = other.Key;
            }

            if (other.ValueType != 0)
            {
                ValueType = other.ValueType;
            }

            if (other.ValueString.Length != 0)
            {
                ValueString = other.ValueString;
            }

            if (other.ValueInt != 0L)
            {
                ValueInt = other.ValueInt;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Key = input.ReadString();
                        break;
                    }
                    case 16:
                    {
                        valueType_ = (global::Types.KVPair.Types.Type) input.ReadEnum();
                        break;
                    }
                    case 26:
                    {
                        ValueString = input.ReadString();
                        break;
                    }
                    case 32:
                    {
                        ValueInt = input.ReadInt64();
                        break;
                    }
                }
            }
        }

        #region Nested types

        /// <summary>Container for nested types declared in the KVPair message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Type
            {
                [pbr::OriginalName("STRING")] String = 0,
                [pbr::OriginalName("INT")] Int = 1,
            }
        }

        #endregion
    }

    #endregion
}

#endregion Designer generated code
